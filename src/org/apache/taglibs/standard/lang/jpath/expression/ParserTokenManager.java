/*
 * The Apache Software License, Version 1.1
 *
 * Copyright (c) 1999-2003 The Apache Software Foundation.  All rights 
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution, if
 *    any, must include the following acknowlegement:  
 *       "This product includes software developed by the 
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowlegement may appear in the software itself,
 *    if and wherever such third-party acknowlegements normally appear.
 *
 * 4. The names "The Jakarta Project", "Tomcat", and "Apache Software
 *    Foundation" must not be used to endorse or promote products derived
 *    from this software without prior written permission. For written 
 *    permission, please contact apache@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache"
 *    nor may "Apache" appear in their names without prior written
 *    permission of the Apache Group.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 *
 */ 

/* Generated By:JJTree&JavaCC: Do not edit this line. ParserTokenManager.java */
package org.apache.taglibs.standard.lang.jpath.expression;
import java.io.StringReader;

public class ParserTokenManager implements ParserConstants
{
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x20000L) != 0L)
            return 48;
         if ((active0 & 0x400L) != 0L)
            return 52;
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 63;
            return 3;
         }
         if ((active0 & 0x40001200000000L) != 0L)
         {
            jjmatchedKind = 63;
            return 36;
         }
         if ((active0 & 0x200400000000000L) != 0L)
         {
            jjmatchedKind = 63;
            return 32;
         }
         if ((active0 & 0x100000000100000L) != 0L)
         {
            jjmatchedKind = 63;
            return 28;
         }
         if ((active0 & 0x80000800000000L) != 0L)
         {
            jjmatchedKind = 63;
            return 10;
         }
         if ((active0 & 0x8370080000000L) != 0L)
         {
            jjmatchedKind = 63;
            return 17;
         }
         if ((active0 & 0x3708e560200000L) != 0L)
         {
            jjmatchedKind = 63;
            return 50;
         }
         return -1;
      case 1:
         if ((active0 & 0x3ffbfffe0100000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 1;
            return 50;
         }
         if ((active0 & 0x200000L) != 0L)
            return 50;
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 1;
            return 31;
         }
         return -1;
      case 2:
         if ((active0 & 0x3ffffffe0000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 2;
            return 50;
         }
         if ((active0 & 0x100000L) != 0L)
            return 50;
         return -1;
      case 3:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x2e7fffee0000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 3;
            return 50;
         }
         return -1;
      case 4:
         if ((active0 & 0x245fffee0000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 4;
            return 50;
         }
         if ((active0 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active0 & 0x241fff4e0000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 5;
            return 50;
         }
         if ((active0 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x4005d000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x201fa0420000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 6;
            return 50;
         }
         return -1;
      case 7:
         if ((active0 & 0x200fa0000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 7;
            return 50;
         }
         if ((active0 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x4005d000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x720000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 8;
            return 50;
         }
         if ((active0 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x4005d000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x300000000000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x4005d000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x300000000000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active0 & 0x4005d000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x300000000000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active0 & 0x40059000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0x300000000000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active0 & 0x11000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active0 & 0x300000000000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active0 & 0x11000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active0 & 0x300000000000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 8;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active0 & 0x300000000000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 8;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 37:
         return jjStopAtPos(0, 8);
      case 40:
         return jjStopAtPos(0, 25);
      case 41:
         return jjStopAtPos(0, 26);
      case 42:
         return jjStopAtPos(0, 7);
      case 43:
         return jjStopAtPos(0, 9);
      case 44:
         return jjStopAtPos(0, 24);
      case 45:
         return jjStartNfaWithStates_0(0, 10, 52);
      case 46:
         return jjStartNfaWithStates_0(0, 17, 48);
      case 47:
         return jjStopAtPos(0, 6);
      case 58:
         return jjStopAtPos(0, 19);
      case 60:
         jjmatchedKind = 13;
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 61:
         return jjStopAtPos(0, 11);
      case 62:
         jjmatchedKind = 15;
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 91:
         return jjStopAtPos(0, 27);
      case 93:
         return jjStopAtPos(0, 28);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x100000000100000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x20000000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x5082400000000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0xc000000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x40001200000000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x10000140000000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x800000000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x80000800000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x8370080000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x200400000000000L);
      case 123:
         return jjStopAtPos(0, 22);
      case 124:
         return jjStopAtPos(0, 18);
      case 125:
         return jjStopAtPos(0, 23);
      default :
         return jjMoveNfa_0(4, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(1, 12);
         else if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(1, 14);
         else if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(1, 16);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x22000000000000L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000100000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x2d4883920000000L);
      case 114:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(1, 21, 50);
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x50080000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x9320040000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x440000000000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x320000000000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0xc000000000L);
      case 100:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 20, 50);
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000040000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x82000000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x220000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x41011080000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x2800000000000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000100000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000800000000L);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(3, 32);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(3, 51);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(3, 52);
         break;
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x220000000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x810080000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000420000000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x40001000000000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x4400800000000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0xc200000000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x1040000000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x320000000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x2080000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(4, 49);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(4, 53);
         break;
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x40083000000000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000c800000000L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000060000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x200010080000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x4b60000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(5, 33);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(5, 35);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(5, 50);
         break;
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000020000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0xc000000000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x10080000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x200880000000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000400000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x320040000000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x40003000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(6, 30);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(6, 31);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(6, 37);
         break;
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0x4005d000000000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x80400000000000L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x320000000000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x80020000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x101000000000000L);
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(7, 29);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(7, 34);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(7, 48);
         break;
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000000L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x300000000000000L);
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0xb21000000000L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x80400000000000L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L);
      case 119:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(8, 43);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(8, 47);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(8, 56);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(8, 57);
         break;
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000000L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x80410000000000L);
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0x320000000000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(9, 41);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(9, 46);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(9, 55);
         break;
      case 45:
         return jjMoveStringLiteralDfa10_0(active0, 0x300000000000L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000L);
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x9000000000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x40040000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(10, 38);
         break;
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000000L);
      case 98:
         return jjMoveStringLiteralDfa11_0(active0, 0x101000000000L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000000000L);
      case 103:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000L);
      case 104:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000000L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(11, 39);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(11, 42);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(11, 54);
         break;
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x101000000000L);
      case 102:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000000L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 102:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000000000L);
      case 104:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000000L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(13, 36);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(13, 40);
         break;
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0x200000000000L);
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa15_0(active0, 0x300000000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(15, 45);
         break;
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(16, 44);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 52;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 28:
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(50);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     jjCheckNAddTwoStates(44, 45);
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(48);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(50);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(50);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(50);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     jjCheckNAddTwoStates(44, 45);
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(44, 47);
                  else if (curChar == 46)
                     jjCheckNAdd(48);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(42, 43);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(39, 40);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(50);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(50);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(50);
                  break;
               case 0:
                  if (curChar == 58 && kind > 58)
                     kind = 58;
                  break;
               case 38:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(39, 40);
                  break;
               case 39:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(39, 40);
                  break;
               case 40:
                  if (curChar == 34 && kind > 60)
                     kind = 60;
                  break;
               case 41:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 42:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 43:
                  if (curChar == 39 && kind > 60)
                     kind = 60;
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAddTwoStates(44, 45);
                  break;
               case 45:
                  if (curChar != 46)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(46);
                  break;
               case 47:
                  if (curChar == 46)
                     jjCheckNAdd(48);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(48);
                  break;
               case 51:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(44, 47);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 28:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAdd(50);
                  }
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 17:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAdd(50);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 10:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAdd(50);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 31:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAdd(50);
                  }
                  if (curChar == 117)
                     jjCheckNAdd(30);
                  break;
               case 4:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAdd(50);
                  }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 36;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 32;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 28;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAdd(50);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 36:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAdd(50);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 32:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAdd(50);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 1:
                  if (curChar == 101)
                     jjCheckNAdd(0);
                  break;
               case 2:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 5:
                  if (curChar == 116)
                     jjCheckNAdd(0);
                  break;
               case 6:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 11:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
               case 19:
                  if (curChar == 110)
                     jjCheckNAdd(0);
                  break;
               case 13:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 18:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 20:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 29:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 101 && kind > 59)
                     kind = 59;
                  break;
               case 33:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 115)
                     jjCheckNAdd(30);
                  break;
               case 35:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 37:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 39:
                  jjAddStates(0, 1);
                  break;
               case 42:
                  jjAddStates(2, 3);
                  break;
               case 49:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(50);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 39:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 1);
                  break;
               case 42:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(2, 3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 52 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   39, 40, 42, 43, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\57", "\52", "\45", "\53", "\55", "\75", 
"\41\75", "\74", "\74\75", "\76", "\76\75", "\56", "\174", "\72", "\141\156\144", 
"\157\162", "\173", "\175", "\54", "\50", "\51", "\133", "\135", 
"\142\157\157\154\145\141\156\50", "\156\165\155\142\145\162\50", "\163\164\162\151\156\147\50", 
"\156\157\164\50", "\146\154\157\157\162\50", "\143\145\151\154\151\156\147\50", 
"\162\157\165\156\144\50", "\146\157\162\155\141\164\55\156\165\155\142\145\162\50", 
"\143\157\156\143\141\164\50", "\145\156\143\157\144\145\55\165\162\154\50", 
"\145\156\143\157\144\145\55\150\164\155\154\50", "\163\164\162\151\156\147\55\154\145\156\147\164\150\50", 
"\163\165\142\163\164\162\151\156\147\50", "\163\164\141\162\164\163\55\167\151\164\150\50", 
"\143\157\156\164\141\151\156\163\50", "\163\165\142\163\164\162\151\156\147\55\142\145\146\157\162\145\50", 
"\163\165\142\163\164\162\151\156\147\55\141\146\164\145\162\50", "\164\162\141\156\163\154\141\164\145\50", 
"\160\157\163\151\164\151\157\156\50", "\143\165\162\162\145\156\164\50", "\154\141\163\164\50", 
"\143\157\165\156\164\50", "\163\165\155\50", "\156\157\167\50", "\144\141\164\145\50", 
"\146\157\162\155\141\164\55\144\141\164\145\50", "\162\157\154\154\55\144\141\164\145\50", 
"\141\144\144\55\144\141\164\145\50", "\164\157\153\145\156\151\172\145\50", null, null, null, null, null, null, 
null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xdfffffffffffffc1L, 0x0L, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 
};
private ASCII_CharStream input_stream;
private final int[] jjrounds = new int[52];
private final int[] jjstateSet = new int[104];
protected char curChar;
public ParserTokenManager(ASCII_CharStream stream)
{
   if (ASCII_CharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public ParserTokenManager(ASCII_CharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(ASCII_CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 52; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(ASCII_CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

private final Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public final Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
