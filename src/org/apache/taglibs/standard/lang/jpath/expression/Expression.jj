/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Expression.jj */
/*@egen*/options {               
   STATIC=false;                                            
}

PARSER_BEGIN(Parser)
package org.apache.taglibs.standard.lang.jpath.expression;

import java.io.StringReader;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTParserState jjtree = new JJTParserState();

/*@egen*/
    public static Expression parse(String expressionText) 
            throws ParseException {
        Parser parser;
        Expression expression;
        parser = new Parser(new StringReader(expressionText));
        parser.Expression();
        expression  = (Expression)parser.jjtree.rootNode();
        return expression;
    }

    void jjtreeOpenNodeScope(Node n) {
        ((SimpleNode)n).firstToken = getToken(0);
    }

    void jjtreeCloseNodeScope(Node n) {
        ((SimpleNode)n).lastToken = getToken(0);
    }
    
}

PARSER_END(Parser)


/*----------------------------*/
/* Skip Whitespace everywhere */
/*----------------------------*/
SKIP :
{
  " "
| 
  "\t"
| 
  "\r"
| 
  "\n"
| 
  "\f"
}


/*-----------------*/
/* Operator Tokens */
/*-----------------*/


TOKEN:
{
  <DIV:"/">
| 
  <MULT:"*">
| 
  <MOD:"%">
| 
  <PLUS:"+">
| 
  <MINUS:"-">
| 
  <EQ:"=">
| 
  <NEQ:"!=">
| 
  <LT:"<">
| 
  <LTE:"<=">
|
  <GT:">">
| 
  <GTE:">=">
| 
  <INTROSPECT:".">
| 
  <UNION:"|">
| 
  <SCOPE_LIMIT:":">
| 
  <AND:"and">
| 
  <OR:"or">
| 
  <LIST_BEGIN:"{">
| 
  <LIST_END:"}">
| 
  <SEPARATOR:",">
|
  <FUNCTION_BEGIN:"(">
| 
  <FUNCTION_END:")">
|
  <PREDICATE_BEGIN:"[">
| 
  <PREDICATE_END:"]">
}

/*
 * Expression syntax follows.
 */

void Expression()               :
{/*@bgen(jjtree) #Expression( 1) */
  Expression jjtn000 = new Expression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #Expression( 1) */
  try {
/*@egen*/
  Expr() <EOF>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  1);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

/* [1] Expr ::= OrExpr */
void Expr()      :
{}
{
  OrExpr()
}


/* [2] OrExpr ::= AndExpr ( 'or' AndExpr )* */
void OrExpr()       :
{}
{
  AndExpr()
  ( <OR>/*@bgen(jjtree) #OrOperator( 2) */
         {
           OrOperator jjtn001 = new OrOperator(JJTOROPERATOR);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtreeOpenNodeScope(jjtn001);
         }
         try {
/*@egen*/ AndExpr()/*@bgen(jjtree)*/
         } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             throw (RuntimeException)jjte001;
           }
           if (jjte001 instanceof ParseException) {
             throw (ParseException)jjte001;
           }
           throw (Error)jjte001;
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  2);
             jjtreeCloseNodeScope(jjtn001);
           }
         }
/*@egen*/ )*
}

/* [3] AndExpr ::= EqualityExpr ( 'and' EqualityExpr )* */
void AndExpr()       :
{}
{
  EqualityExpr()
  ( <AND>/*@bgen(jjtree) #AndOperator( 2) */
          {
            AndOperator jjtn001 = new AndOperator(JJTANDOPERATOR);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtreeOpenNodeScope(jjtn001);
          }
          try {
/*@egen*/ EqualityExpr()/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
              jjtreeCloseNodeScope(jjtn001);
            }
          }
/*@egen*/ )*
}

/* [4] EqualityExpr ::= RelationalExpr ( ( '=' | '!-' ) RelationExpr )* */
void EqualityExpr()       :
{}
{
  RelationalExpr()
  (
     <EQ>/*@bgen(jjtree) #EqualsOperator( 2) */
          {
            EqualsOperator jjtn001 = new EqualsOperator(JJTEQUALSOPERATOR);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtreeOpenNodeScope(jjtn001);
          }
          try {
/*@egen*/ RelationalExpr()/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
              jjtreeCloseNodeScope(jjtn001);
            }
          }
/*@egen*/
   |
     <NEQ>/*@bgen(jjtree) #NotEqualsOperator( 2) */
           {
             NotEqualsOperator jjtn002 = new NotEqualsOperator(JJTNOTEQUALSOPERATOR);
             boolean jjtc002 = true;
             jjtree.openNodeScope(jjtn002);
             jjtreeOpenNodeScope(jjtn002);
           }
           try {
/*@egen*/ RelationalExpr()/*@bgen(jjtree)*/
           } catch (Throwable jjte002) {
             if (jjtc002) {
               jjtree.clearNodeScope(jjtn002);
               jjtc002 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte002 instanceof RuntimeException) {
               throw (RuntimeException)jjte002;
             }
             if (jjte002 instanceof ParseException) {
               throw (ParseException)jjte002;
             }
             throw (Error)jjte002;
           } finally {
             if (jjtc002) {
               jjtree.closeNodeScope(jjtn002,  2);
               jjtreeCloseNodeScope(jjtn002);
             }
           }
/*@egen*/
  )*
}

/* [5] RelationalExpr ::= AdditiveExpr ( ( '<' | '>' | '<=' | '>=' ) AdditiveExpr )* */
void RelationalExpr()       :
{}
{
  AdditiveExpr()
  (
    <LT>/*@bgen(jjtree) #LessThanOperator( 2) */
         {
           LessThanOperator jjtn001 = new LessThanOperator(JJTLESSTHANOPERATOR);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtreeOpenNodeScope(jjtn001);
         }
         try {
/*@egen*/ AdditiveExpr()/*@bgen(jjtree)*/
         } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             throw (RuntimeException)jjte001;
           }
           if (jjte001 instanceof ParseException) {
             throw (ParseException)jjte001;
           }
           throw (Error)jjte001;
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  2);
             jjtreeCloseNodeScope(jjtn001);
           }
         }
/*@egen*/
   |
    <GT>/*@bgen(jjtree) #GreaterThanOperator( 2) */
         {
           GreaterThanOperator jjtn002 = new GreaterThanOperator(JJTGREATERTHANOPERATOR);
           boolean jjtc002 = true;
           jjtree.openNodeScope(jjtn002);
           jjtreeOpenNodeScope(jjtn002);
         }
         try {
/*@egen*/ AdditiveExpr()/*@bgen(jjtree)*/
         } catch (Throwable jjte002) {
           if (jjtc002) {
             jjtree.clearNodeScope(jjtn002);
             jjtc002 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte002 instanceof RuntimeException) {
             throw (RuntimeException)jjte002;
           }
           if (jjte002 instanceof ParseException) {
             throw (ParseException)jjte002;
           }
           throw (Error)jjte002;
         } finally {
           if (jjtc002) {
             jjtree.closeNodeScope(jjtn002,  2);
             jjtreeCloseNodeScope(jjtn002);
           }
         }
/*@egen*/
   |
    <LTE>/*@bgen(jjtree) #LessThanEqualOperator( 2) */
          {
            LessThanEqualOperator jjtn003 = new LessThanEqualOperator(JJTLESSTHANEQUALOPERATOR);
            boolean jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
            jjtreeOpenNodeScope(jjtn003);
          }
          try {
/*@egen*/ AdditiveExpr()/*@bgen(jjtree)*/
          } catch (Throwable jjte003) {
            if (jjtc003) {
              jjtree.clearNodeScope(jjtn003);
              jjtc003 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte003 instanceof RuntimeException) {
              throw (RuntimeException)jjte003;
            }
            if (jjte003 instanceof ParseException) {
              throw (ParseException)jjte003;
            }
            throw (Error)jjte003;
          } finally {
            if (jjtc003) {
              jjtree.closeNodeScope(jjtn003,  2);
              jjtreeCloseNodeScope(jjtn003);
            }
          }
/*@egen*/
   |
    <GTE>/*@bgen(jjtree) #GreaterThanEqualOperator( 2) */
          {
            GreaterThanEqualOperator jjtn004 = new GreaterThanEqualOperator(JJTGREATERTHANEQUALOPERATOR);
            boolean jjtc004 = true;
            jjtree.openNodeScope(jjtn004);
            jjtreeOpenNodeScope(jjtn004);
          }
          try {
/*@egen*/ AdditiveExpr()/*@bgen(jjtree)*/
          } catch (Throwable jjte004) {
            if (jjtc004) {
              jjtree.clearNodeScope(jjtn004);
              jjtc004 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte004 instanceof RuntimeException) {
              throw (RuntimeException)jjte004;
            }
            if (jjte004 instanceof ParseException) {
              throw (ParseException)jjte004;
            }
            throw (Error)jjte004;
          } finally {
            if (jjtc004) {
              jjtree.closeNodeScope(jjtn004,  2);
              jjtreeCloseNodeScope(jjtn004);
            }
          }
/*@egen*/
  )*
}

/* [6] AdditiveExpr ::= MultiplicitiveExpr ( ( '+' | '-' ) MultiplicitiveExpr )* */
void AdditiveExpr()       :
{}
{
  MultiplicativeExpr()
  (
    <PLUS>/*@bgen(jjtree) #AdditionOperator( 2) */
           {
             AdditionOperator jjtn001 = new AdditionOperator(JJTADDITIONOPERATOR);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
             jjtreeOpenNodeScope(jjtn001);
           }
           try {
/*@egen*/ MultiplicativeExpr()/*@bgen(jjtree)*/
           } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               throw (RuntimeException)jjte001;
             }
             if (jjte001 instanceof ParseException) {
               throw (ParseException)jjte001;
             }
             throw (Error)jjte001;
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  2);
               jjtreeCloseNodeScope(jjtn001);
             }
           }
/*@egen*/
   |
    <MINUS>/*@bgen(jjtree) #SubtractionOperator( 2) */
            {
              SubtractionOperator jjtn002 = new SubtractionOperator(JJTSUBTRACTIONOPERATOR);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
              jjtreeOpenNodeScope(jjtn002);
            }
            try {
/*@egen*/ MultiplicativeExpr()/*@bgen(jjtree)*/
            } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                throw (RuntimeException)jjte002;
              }
              if (jjte002 instanceof ParseException) {
                throw (ParseException)jjte002;
              }
              throw (Error)jjte002;
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  2);
                jjtreeCloseNodeScope(jjtn002);
              }
            }
/*@egen*/
  )*
}

/* [7] MultiplicitiveExpr ::= UnaryExpr ( ( '*' | '/' | '%' ) UnaryExpr )* */
void MultiplicativeExpr()       :
{}
{
  UnaryExpr()
  (
    <MULT>/*@bgen(jjtree) #MultiplicationOperator( 2) */
           {
             MultiplicationOperator jjtn001 = new MultiplicationOperator(JJTMULTIPLICATIONOPERATOR);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
             jjtreeOpenNodeScope(jjtn001);
           }
           try {
/*@egen*/ UnaryExpr()/*@bgen(jjtree)*/
           } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               throw (RuntimeException)jjte001;
             }
             if (jjte001 instanceof ParseException) {
               throw (ParseException)jjte001;
             }
             throw (Error)jjte001;
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  2);
               jjtreeCloseNodeScope(jjtn001);
             }
           }
/*@egen*/
   |
    <DIV>/*@bgen(jjtree) #DivisionOperator( 2) */
          {
            DivisionOperator jjtn002 = new DivisionOperator(JJTDIVISIONOPERATOR);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtreeOpenNodeScope(jjtn002);
          }
          try {
/*@egen*/ UnaryExpr()/*@bgen(jjtree)*/
          } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              throw (RuntimeException)jjte002;
            }
            if (jjte002 instanceof ParseException) {
              throw (ParseException)jjte002;
            }
            throw (Error)jjte002;
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002,  2);
              jjtreeCloseNodeScope(jjtn002);
            }
          }
/*@egen*/
   |
    <MOD>/*@bgen(jjtree) #ModulusOperator( 2) */
          {
            ModulusOperator jjtn003 = new ModulusOperator(JJTMODULUSOPERATOR);
            boolean jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
            jjtreeOpenNodeScope(jjtn003);
          }
          try {
/*@egen*/ UnaryExpr()/*@bgen(jjtree)*/
          } catch (Throwable jjte003) {
            if (jjtc003) {
              jjtree.clearNodeScope(jjtn003);
              jjtc003 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte003 instanceof RuntimeException) {
              throw (RuntimeException)jjte003;
            }
            if (jjte003 instanceof ParseException) {
              throw (ParseException)jjte003;
            }
            throw (Error)jjte003;
          } finally {
            if (jjtc003) {
              jjtree.closeNodeScope(jjtn003,  2);
              jjtreeCloseNodeScope(jjtn003);
            }
          }
/*@egen*/
  )*
}

/* [7] UnaryExpr ::= UnionExpr | '-' UnaryExpr */
void UnaryExpr()       :
{}
{
  UnionExpr()
  | <MINUS> UnaryExpr()
}

/* [7] UnionExpr ::= IntrospectiveExpr ( '|' IntrospectiveExpr )* */
void UnionExpr()       :
{} 
{
  IntrospectiveExpr() ( <UNION>/*@bgen(jjtree) #UnionOperator( 2) */
                                {
                                  UnionOperator jjtn001 = new UnionOperator(JJTUNIONOPERATOR);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                  jjtreeOpenNodeScope(jjtn001);
                                }
                                try {
/*@egen*/ IntrospectiveExpr()/*@bgen(jjtree)*/
                                } catch (Throwable jjte001) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte001;
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    throw (ParseException)jjte001;
                                  }
                                  throw (Error)jjte001;
                                } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  2);
                                    jjtreeCloseNodeScope(jjtn001);
                                  }
                                }
/*@egen*/ )*
}

/* [7] IntrospectiveExpr ::= PathExpr ( '.' PathExpr )* */
void IntrospectiveExpr()       :
{}
{
  PathExpr()
  (
    <INTROSPECT>/*@bgen(jjtree) #IntrospectionOperator( 2) */
                 {
                   IntrospectionOperator jjtn001 = new IntrospectionOperator(JJTINTROSPECTIONOPERATOR);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                   jjtreeOpenNodeScope(jjtn001);
                 }
                 try {
/*@egen*/ PathExpr()/*@bgen(jjtree)*/
                 } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     throw (RuntimeException)jjte001;
                   }
                   if (jjte001 instanceof ParseException) {
                     throw (ParseException)jjte001;
                   }
                   throw (Error)jjte001;
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001,  2);
                     jjtreeCloseNodeScope(jjtn001);
                   }
                 }
/*@egen*/
  )*
}

/* [7] PathExpr ::= FilterExpr */
void PathExpr()       :
{}
{
   FilterExpr()
}

/* [7] FilterExpr ::= PrimaryExpr ( Predicate )* */
void FilterExpr()       :
{}
{
PrimaryExpr() (/*@bgen(jjtree) #FilterOperator( 2) */
                {
                  FilterOperator jjtn001 = new FilterOperator(JJTFILTEROPERATOR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtreeOpenNodeScope(jjtn001);
                }
                try {
/*@egen*/ Predicate()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                    jjtreeCloseNodeScope(jjtn001);
                  }
                }
/*@egen*/ )*
}


/* [] Predicate ::= '[' PredicateExpr ']' */
void Predicate()               :
{/*@bgen(jjtree) #Predicate( 1) */
  Predicate jjtn000 = new Predicate(JJTPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #Predicate( 1) */
  try {
/*@egen*/
  <PREDICATE_BEGIN> PredicateExpr() <PREDICATE_END>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  1);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

/* [] PredicateExpr ::= Expr */
void PredicateExpr()       :
{}
{
  Expr()
}


/* [7] PrimaryExpr ::= Literal | '(' Expr ')' | FunctionCall | ScopeLimitExpr | Identifier */
void PrimaryExpr()       :
{}
{
  Literal()
|
  "(" Expr() ")"
|
  LOOKAHEAD(2) Function()
|
  ScopeLimitExpr()
|
  LOOKAHEAD(2) Identifier()
}

/* FunctionCall ::= FunctionName '(' ( Argument ( ',' Argument)*)? ')'  */
/* FunctionName ::= 'boolean' | 'number' | 'string' | 'not' | ...  */
void Function()       :
{
}
{
   "boolean(" Argument()/*@bgen(jjtree) #BooleanFunction( 1) */
                         {
                           BooleanFunction jjtn001 = new BooleanFunction(JJTBOOLEANFUNCTION);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                           jjtreeOpenNodeScope(jjtn001);
                         }
                         try {
/*@egen*/ <FUNCTION_END>/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001,  1);
                             jjtreeCloseNodeScope(jjtn001);
                           }
                         }
/*@egen*/
  |
   "number(" Argument()/*@bgen(jjtree) #NumberFunction( 1) */
                        {
                          NumberFunction jjtn002 = new NumberFunction(JJTNUMBERFUNCTION);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
                          jjtreeOpenNodeScope(jjtn002);
                        }
                        try {
/*@egen*/ <FUNCTION_END>/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002,  1);
                            jjtreeCloseNodeScope(jjtn002);
                          }
                        }
/*@egen*/
  |
   "string(" Argument()/*@bgen(jjtree) #StringFunction( 1) */
                        {
                          StringFunction jjtn003 = new StringFunction(JJTSTRINGFUNCTION);
                          boolean jjtc003 = true;
                          jjtree.openNodeScope(jjtn003);
                          jjtreeOpenNodeScope(jjtn003);
                        }
                        try {
/*@egen*/ <FUNCTION_END>/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003,  1);
                            jjtreeCloseNodeScope(jjtn003);
                          }
                        }
/*@egen*/
  |
   "not(" Argument()/*@bgen(jjtree) #NotFunction( 1) */
                     {
                       NotFunction jjtn004 = new NotFunction(JJTNOTFUNCTION);
                       boolean jjtc004 = true;
                       jjtree.openNodeScope(jjtn004);
                       jjtreeOpenNodeScope(jjtn004);
                     }
                     try {
/*@egen*/ <FUNCTION_END>/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc004) {
                         jjtree.closeNodeScope(jjtn004,  1);
                         jjtreeCloseNodeScope(jjtn004);
                       }
                     }
/*@egen*/
  |
   "floor(" Argument()/*@bgen(jjtree) #FloorFunction( 1) */
                       {
                         FloorFunction jjtn005 = new FloorFunction(JJTFLOORFUNCTION);
                         boolean jjtc005 = true;
                         jjtree.openNodeScope(jjtn005);
                         jjtreeOpenNodeScope(jjtn005);
                       }
                       try {
/*@egen*/ <FUNCTION_END>/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc005) {
                           jjtree.closeNodeScope(jjtn005,  1);
                           jjtreeCloseNodeScope(jjtn005);
                         }
                       }
/*@egen*/
  |
   "ceiling(" Argument()/*@bgen(jjtree) #CeilingFunction( 1) */
                         {
                           CeilingFunction jjtn006 = new CeilingFunction(JJTCEILINGFUNCTION);
                           boolean jjtc006 = true;
                           jjtree.openNodeScope(jjtn006);
                           jjtreeOpenNodeScope(jjtn006);
                         }
                         try {
/*@egen*/ <FUNCTION_END>/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc006) {
                             jjtree.closeNodeScope(jjtn006,  1);
                             jjtreeCloseNodeScope(jjtn006);
                           }
                         }
/*@egen*/
  |
   "round(" Argument()/*@bgen(jjtree) #RoundFunction( 1) */
                       {
                         RoundFunction jjtn007 = new RoundFunction(JJTROUNDFUNCTION);
                         boolean jjtc007 = true;
                         jjtree.openNodeScope(jjtn007);
                         jjtreeOpenNodeScope(jjtn007);
                       }
                       try {
/*@egen*/ <FUNCTION_END>/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc007) {
                           jjtree.closeNodeScope(jjtn007,  1);
                           jjtreeCloseNodeScope(jjtn007);
                         }
                       }
/*@egen*/
  |/*@bgen(jjtree) #FormatNumberFunction(> 1) */
   {
     FormatNumberFunction jjtn008 = new FormatNumberFunction(JJTFORMATNUMBERFUNCTION);
     boolean jjtc008 = true;
     jjtree.openNodeScope(jjtn008);
     jjtreeOpenNodeScope(jjtn008);
   }
   try {
/*@egen*/
   ( "format-number(" Argument() <SEPARATOR> Argument() ( <SEPARATOR> Argument() )? <FUNCTION_END> )/*@bgen(jjtree)*/
   } catch (Throwable jjte008) {
     if (jjtc008) {
       jjtree.clearNodeScope(jjtn008);
       jjtc008 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte008 instanceof RuntimeException) {
       throw (RuntimeException)jjte008;
     }
     if (jjte008 instanceof ParseException) {
       throw (ParseException)jjte008;
     }
     throw (Error)jjte008;
   } finally {
     if (jjtc008) {
       jjtree.closeNodeScope(jjtn008, jjtree.nodeArity() > 1);
       jjtreeCloseNodeScope(jjtn008);
     }
   }
/*@egen*/
  |/*@bgen(jjtree) #ConcatFunction(> 1) */
   {
     ConcatFunction jjtn009 = new ConcatFunction(JJTCONCATFUNCTION);
     boolean jjtc009 = true;
     jjtree.openNodeScope(jjtn009);
     jjtreeOpenNodeScope(jjtn009);
   }
   try {
/*@egen*/
   ( "concat(" Argument() (<SEPARATOR> Argument())+ <FUNCTION_END> )/*@bgen(jjtree)*/
   } catch (Throwable jjte009) {
     if (jjtc009) {
       jjtree.clearNodeScope(jjtn009);
       jjtc009 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte009 instanceof RuntimeException) {
       throw (RuntimeException)jjte009;
     }
     if (jjte009 instanceof ParseException) {
       throw (ParseException)jjte009;
     }
     throw (Error)jjte009;
   } finally {
     if (jjtc009) {
       jjtree.closeNodeScope(jjtn009, jjtree.nodeArity() > 1);
       jjtreeCloseNodeScope(jjtn009);
     }
   }
/*@egen*/
  |
   "encode-url(" Argument()/*@bgen(jjtree) #EncodeUrlFunction( 1) */
                            {
                              EncodeUrlFunction jjtn010 = new EncodeUrlFunction(JJTENCODEURLFUNCTION);
                              boolean jjtc010 = true;
                              jjtree.openNodeScope(jjtn010);
                              jjtreeOpenNodeScope(jjtn010);
                            }
                            try {
/*@egen*/ <FUNCTION_END>/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc010) {
                                jjtree.closeNodeScope(jjtn010,  1);
                                jjtreeCloseNodeScope(jjtn010);
                              }
                            }
/*@egen*/
  |
   "encode-html(" Argument()/*@bgen(jjtree) #EncodeHtmlFunction( 1) */
                             {
                               EncodeHtmlFunction jjtn011 = new EncodeHtmlFunction(JJTENCODEHTMLFUNCTION);
                               boolean jjtc011 = true;
                               jjtree.openNodeScope(jjtn011);
                               jjtreeOpenNodeScope(jjtn011);
                             }
                             try {
/*@egen*/ <FUNCTION_END>/*@bgen(jjtree)*/
                             } finally {
                               if (jjtc011) {
                                 jjtree.closeNodeScope(jjtn011,  1);
                                 jjtreeCloseNodeScope(jjtn011);
                               }
                             }
/*@egen*/
  |
   "string-length(" Argument()/*@bgen(jjtree) #StringLengthFunction( 1) */
                               {
                                 StringLengthFunction jjtn012 = new StringLengthFunction(JJTSTRINGLENGTHFUNCTION);
                                 boolean jjtc012 = true;
                                 jjtree.openNodeScope(jjtn012);
                                 jjtreeOpenNodeScope(jjtn012);
                               }
                               try {
/*@egen*/ <FUNCTION_END>/*@bgen(jjtree)*/
                               } finally {
                                 if (jjtc012) {
                                   jjtree.closeNodeScope(jjtn012,  1);
                                   jjtreeCloseNodeScope(jjtn012);
                                 }
                               }
/*@egen*/
  |/*@bgen(jjtree) #SubstringFunction(> 1) */
   {
     SubstringFunction jjtn013 = new SubstringFunction(JJTSUBSTRINGFUNCTION);
     boolean jjtc013 = true;
     jjtree.openNodeScope(jjtn013);
     jjtreeOpenNodeScope(jjtn013);
   }
   try {
/*@egen*/
   ( "substring(" Argument() <SEPARATOR> Argument() (<SEPARATOR> Argument() )? <FUNCTION_END> )/*@bgen(jjtree)*/
   } catch (Throwable jjte013) {
     if (jjtc013) {
       jjtree.clearNodeScope(jjtn013);
       jjtc013 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte013 instanceof RuntimeException) {
       throw (RuntimeException)jjte013;
     }
     if (jjte013 instanceof ParseException) {
       throw (ParseException)jjte013;
     }
     throw (Error)jjte013;
   } finally {
     if (jjtc013) {
       jjtree.closeNodeScope(jjtn013, jjtree.nodeArity() > 1);
       jjtreeCloseNodeScope(jjtn013);
     }
   }
/*@egen*/
  |/*@bgen(jjtree) #StartsWithFunction( 2) */
   {
     StartsWithFunction jjtn014 = new StartsWithFunction(JJTSTARTSWITHFUNCTION);
     boolean jjtc014 = true;
     jjtree.openNodeScope(jjtn014);
     jjtreeOpenNodeScope(jjtn014);
   }
   try {
/*@egen*/
   ( "starts-with(" Argument() <SEPARATOR> Argument() <FUNCTION_END> )/*@bgen(jjtree)*/
   } catch (Throwable jjte014) {
     if (jjtc014) {
       jjtree.clearNodeScope(jjtn014);
       jjtc014 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte014 instanceof RuntimeException) {
       throw (RuntimeException)jjte014;
     }
     if (jjte014 instanceof ParseException) {
       throw (ParseException)jjte014;
     }
     throw (Error)jjte014;
   } finally {
     if (jjtc014) {
       jjtree.closeNodeScope(jjtn014,  2);
       jjtreeCloseNodeScope(jjtn014);
     }
   }
/*@egen*/
  |/*@bgen(jjtree) #ContainsFunction( 2) */
   {
     ContainsFunction jjtn015 = new ContainsFunction(JJTCONTAINSFUNCTION);
     boolean jjtc015 = true;
     jjtree.openNodeScope(jjtn015);
     jjtreeOpenNodeScope(jjtn015);
   }
   try {
/*@egen*/
   ( "contains(" Argument() <SEPARATOR> Argument() <FUNCTION_END> )/*@bgen(jjtree)*/
   } catch (Throwable jjte015) {
     if (jjtc015) {
       jjtree.clearNodeScope(jjtn015);
       jjtc015 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte015 instanceof RuntimeException) {
       throw (RuntimeException)jjte015;
     }
     if (jjte015 instanceof ParseException) {
       throw (ParseException)jjte015;
     }
     throw (Error)jjte015;
   } finally {
     if (jjtc015) {
       jjtree.closeNodeScope(jjtn015,  2);
       jjtreeCloseNodeScope(jjtn015);
     }
   }
/*@egen*/
  |/*@bgen(jjtree) #SubstringBeforeFunction( 2) */
   {
     SubstringBeforeFunction jjtn016 = new SubstringBeforeFunction(JJTSUBSTRINGBEFOREFUNCTION);
     boolean jjtc016 = true;
     jjtree.openNodeScope(jjtn016);
     jjtreeOpenNodeScope(jjtn016);
   }
   try {
/*@egen*/
   ( "substring-before(" Argument() <SEPARATOR> Argument() <FUNCTION_END> )/*@bgen(jjtree)*/
   } catch (Throwable jjte016) {
     if (jjtc016) {
       jjtree.clearNodeScope(jjtn016);
       jjtc016 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte016 instanceof RuntimeException) {
       throw (RuntimeException)jjte016;
     }
     if (jjte016 instanceof ParseException) {
       throw (ParseException)jjte016;
     }
     throw (Error)jjte016;
   } finally {
     if (jjtc016) {
       jjtree.closeNodeScope(jjtn016,  2);
       jjtreeCloseNodeScope(jjtn016);
     }
   }
/*@egen*/
  |/*@bgen(jjtree) #SubstringAfterFunction( 2) */
   {
     SubstringAfterFunction jjtn017 = new SubstringAfterFunction(JJTSUBSTRINGAFTERFUNCTION);
     boolean jjtc017 = true;
     jjtree.openNodeScope(jjtn017);
     jjtreeOpenNodeScope(jjtn017);
   }
   try {
/*@egen*/
   ( "substring-after(" Argument() <SEPARATOR> Argument() <FUNCTION_END> )/*@bgen(jjtree)*/
   } catch (Throwable jjte017) {
     if (jjtc017) {
       jjtree.clearNodeScope(jjtn017);
       jjtc017 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte017 instanceof RuntimeException) {
       throw (RuntimeException)jjte017;
     }
     if (jjte017 instanceof ParseException) {
       throw (ParseException)jjte017;
     }
     throw (Error)jjte017;
   } finally {
     if (jjtc017) {
       jjtree.closeNodeScope(jjtn017,  2);
       jjtreeCloseNodeScope(jjtn017);
     }
   }
/*@egen*/
  |/*@bgen(jjtree) #TranslateFunction( 3) */
   {
     TranslateFunction jjtn018 = new TranslateFunction(JJTTRANSLATEFUNCTION);
     boolean jjtc018 = true;
     jjtree.openNodeScope(jjtn018);
     jjtreeOpenNodeScope(jjtn018);
   }
   try {
/*@egen*/
   ( "translate(" Argument() <SEPARATOR> Argument() <SEPARATOR> Argument() <FUNCTION_END> )/*@bgen(jjtree)*/
   } catch (Throwable jjte018) {
     if (jjtc018) {
       jjtree.clearNodeScope(jjtn018);
       jjtc018 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte018 instanceof RuntimeException) {
       throw (RuntimeException)jjte018;
     }
     if (jjte018 instanceof ParseException) {
       throw (ParseException)jjte018;
     }
     throw (Error)jjte018;
   } finally {
     if (jjtc018) {
       jjtree.closeNodeScope(jjtn018,  3);
       jjtreeCloseNodeScope(jjtn018);
     }
   }
/*@egen*/
  |
   "position("/*@bgen(jjtree) #PositionFunction( 0) */
               {
                 PositionFunction jjtn019 = new PositionFunction(JJTPOSITIONFUNCTION);
                 boolean jjtc019 = true;
                 jjtree.openNodeScope(jjtn019);
                 jjtreeOpenNodeScope(jjtn019);
               }
               try {
/*@egen*/ <FUNCTION_END>/*@bgen(jjtree)*/
               } finally {
                 if (jjtc019) {
                   jjtree.closeNodeScope(jjtn019,  0);
                   jjtreeCloseNodeScope(jjtn019);
                 }
               }
/*@egen*/
  |
   "current("/*@bgen(jjtree) #CurrentFunction( 0) */
              {
                CurrentFunction jjtn020 = new CurrentFunction(JJTCURRENTFUNCTION);
                boolean jjtc020 = true;
                jjtree.openNodeScope(jjtn020);
                jjtreeOpenNodeScope(jjtn020);
              }
              try {
/*@egen*/ <FUNCTION_END>/*@bgen(jjtree)*/
              } finally {
                if (jjtc020) {
                  jjtree.closeNodeScope(jjtn020,  0);
                  jjtreeCloseNodeScope(jjtn020);
                }
              }
/*@egen*/
  |
   "last("/*@bgen(jjtree) #LastFunction( 0) */
           {
             LastFunction jjtn021 = new LastFunction(JJTLASTFUNCTION);
             boolean jjtc021 = true;
             jjtree.openNodeScope(jjtn021);
             jjtreeOpenNodeScope(jjtn021);
           }
           try {
/*@egen*/ <FUNCTION_END>/*@bgen(jjtree)*/
           } finally {
             if (jjtc021) {
               jjtree.closeNodeScope(jjtn021,  0);
               jjtreeCloseNodeScope(jjtn021);
             }
           }
/*@egen*/
  |
   "count(" Argument()/*@bgen(jjtree) #CountFunction( 1) */
                       {
                         CountFunction jjtn022 = new CountFunction(JJTCOUNTFUNCTION);
                         boolean jjtc022 = true;
                         jjtree.openNodeScope(jjtn022);
                         jjtreeOpenNodeScope(jjtn022);
                       }
                       try {
/*@egen*/ <FUNCTION_END>/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc022) {
                           jjtree.closeNodeScope(jjtn022,  1);
                           jjtreeCloseNodeScope(jjtn022);
                         }
                       }
/*@egen*/
  |
   "sum(" Argument()/*@bgen(jjtree) #SumFunction( 1) */
                     {
                       SumFunction jjtn023 = new SumFunction(JJTSUMFUNCTION);
                       boolean jjtc023 = true;
                       jjtree.openNodeScope(jjtn023);
                       jjtreeOpenNodeScope(jjtn023);
                     }
                     try {
/*@egen*/ <FUNCTION_END>/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc023) {
                         jjtree.closeNodeScope(jjtn023,  1);
                         jjtreeCloseNodeScope(jjtn023);
                       }
                     }
/*@egen*/
  |
   "now("/*@bgen(jjtree) #NowFunction( 0) */
          {
            NowFunction jjtn024 = new NowFunction(JJTNOWFUNCTION);
            boolean jjtc024 = true;
            jjtree.openNodeScope(jjtn024);
            jjtreeOpenNodeScope(jjtn024);
          }
          try {
/*@egen*/ <FUNCTION_END>/*@bgen(jjtree)*/
          } finally {
            if (jjtc024) {
              jjtree.closeNodeScope(jjtn024,  0);
              jjtreeCloseNodeScope(jjtn024);
            }
          }
/*@egen*/
  |/*@bgen(jjtree) #DateFunction(> 1) */
   {
     DateFunction jjtn025 = new DateFunction(JJTDATEFUNCTION);
     boolean jjtc025 = true;
     jjtree.openNodeScope(jjtn025);
     jjtreeOpenNodeScope(jjtn025);
   }
   try {
/*@egen*/
   ( "date(" Argument() (<SEPARATOR> Argument())+ <FUNCTION_END> )/*@bgen(jjtree)*/
   } catch (Throwable jjte025) {
     if (jjtc025) {
       jjtree.clearNodeScope(jjtn025);
       jjtc025 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte025 instanceof RuntimeException) {
       throw (RuntimeException)jjte025;
     }
     if (jjte025 instanceof ParseException) {
       throw (ParseException)jjte025;
     }
     throw (Error)jjte025;
   } finally {
     if (jjtc025) {
       jjtree.closeNodeScope(jjtn025, jjtree.nodeArity() > 1);
       jjtreeCloseNodeScope(jjtn025);
     }
   }
/*@egen*/
  |/*@bgen(jjtree) #FormatDateFunction(> 1) */
   {
     FormatDateFunction jjtn026 = new FormatDateFunction(JJTFORMATDATEFUNCTION);
     boolean jjtc026 = true;
     jjtree.openNodeScope(jjtn026);
     jjtreeOpenNodeScope(jjtn026);
   }
   try {
/*@egen*/
   ( "format-date(" Argument() <SEPARATOR> Argument() ( <SEPARATOR> Argument() )? <FUNCTION_END> )/*@bgen(jjtree)*/
   } catch (Throwable jjte026) {
     if (jjtc026) {
       jjtree.clearNodeScope(jjtn026);
       jjtc026 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte026 instanceof RuntimeException) {
       throw (RuntimeException)jjte026;
     }
     if (jjte026 instanceof ParseException) {
       throw (ParseException)jjte026;
     }
     throw (Error)jjte026;
   } finally {
     if (jjtc026) {
       jjtree.closeNodeScope(jjtn026, jjtree.nodeArity() > 1);
       jjtreeCloseNodeScope(jjtn026);
     }
   }
/*@egen*/
  |/*@bgen(jjtree) #RollDateFunction( 3) */
   {
     RollDateFunction jjtn027 = new RollDateFunction(JJTROLLDATEFUNCTION);
     boolean jjtc027 = true;
     jjtree.openNodeScope(jjtn027);
     jjtreeOpenNodeScope(jjtn027);
   }
   try {
/*@egen*/
   ( "roll-date(" Argument() <SEPARATOR> Argument() <SEPARATOR> Argument() <FUNCTION_END> )/*@bgen(jjtree)*/
   } catch (Throwable jjte027) {
     if (jjtc027) {
       jjtree.clearNodeScope(jjtn027);
       jjtc027 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte027 instanceof RuntimeException) {
       throw (RuntimeException)jjte027;
     }
     if (jjte027 instanceof ParseException) {
       throw (ParseException)jjte027;
     }
     throw (Error)jjte027;
   } finally {
     if (jjtc027) {
       jjtree.closeNodeScope(jjtn027,  3);
       jjtreeCloseNodeScope(jjtn027);
     }
   }
/*@egen*/
  |/*@bgen(jjtree) #AddDateFunction( 3) */
   {
     AddDateFunction jjtn028 = new AddDateFunction(JJTADDDATEFUNCTION);
     boolean jjtc028 = true;
     jjtree.openNodeScope(jjtn028);
     jjtreeOpenNodeScope(jjtn028);
   }
   try {
/*@egen*/
   ( "add-date(" Argument() <SEPARATOR> Argument() <SEPARATOR> Argument() <FUNCTION_END> )/*@bgen(jjtree)*/
   } catch (Throwable jjte028) {
     if (jjtc028) {
       jjtree.clearNodeScope(jjtn028);
       jjtc028 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte028 instanceof RuntimeException) {
       throw (RuntimeException)jjte028;
     }
     if (jjte028 instanceof ParseException) {
       throw (ParseException)jjte028;
     }
     throw (Error)jjte028;
   } finally {
     if (jjtc028) {
       jjtree.closeNodeScope(jjtn028,  3);
       jjtreeCloseNodeScope(jjtn028);
     }
   }
/*@egen*/
  |/*@bgen(jjtree) #TokenizeFunction( 2) */
   {
     TokenizeFunction jjtn029 = new TokenizeFunction(JJTTOKENIZEFUNCTION);
     boolean jjtc029 = true;
     jjtree.openNodeScope(jjtn029);
     jjtreeOpenNodeScope(jjtn029);
   }
   try {
/*@egen*/
   ( "tokenize(" Argument() <SEPARATOR> Argument() <FUNCTION_END> )/*@bgen(jjtree)*/
   } catch (Throwable jjte029) {
     if (jjtc029) {
       jjtree.clearNodeScope(jjtn029);
       jjtc029 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte029 instanceof RuntimeException) {
       throw (RuntimeException)jjte029;
     }
     if (jjte029 instanceof ParseException) {
       throw (ParseException)jjte029;
     }
     throw (Error)jjte029;
   } finally {
     if (jjtc029) {
       jjtree.closeNodeScope(jjtn029,  2);
       jjtreeCloseNodeScope(jjtn029);
     }
   }
/*@egen*/
  |/*@bgen(jjtree) #UserFunction(> 1) */
   {
     UserFunction jjtn030 = new UserFunction(JJTUSERFUNCTION);
     boolean jjtc030 = true;
     jjtree.openNodeScope(jjtn030);
     jjtreeOpenNodeScope(jjtn030);
   }
   try {
/*@egen*/
   ( Identifier() ":" Identifier() <FUNCTION_BEGIN> [ Argument() (<SEPARATOR> Argument() )* ] <FUNCTION_END> )/*@bgen(jjtree)*/
   } catch (Throwable jjte030) {
     if (jjtc030) {
       jjtree.clearNodeScope(jjtn030);
       jjtc030 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte030 instanceof RuntimeException) {
       throw (RuntimeException)jjte030;
     }
     if (jjte030 instanceof ParseException) {
       throw (ParseException)jjte030;
     }
     throw (Error)jjte030;
   } finally {
     if (jjtc030) {
       jjtree.closeNodeScope(jjtn030, jjtree.nodeArity() > 1);
       jjtreeCloseNodeScope(jjtn030);
     }
   }
/*@egen*/
}

/* [] Argument ::= Expr */
void Argument()       :
{
}
{
   Expr()
}

/* [] ScopeLimitExpr ::= ScopeLimitName Identifier */
void ScopeLimitExpr()       :
{
   Token t;
}
{
  ScopeLimitName()
  (/*@bgen(jjtree) #ScopeLimitOperator( 2) */
    {
      ScopeLimitOperator jjtn001 = new ScopeLimitOperator(JJTSCOPELIMITOPERATOR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
    }
    try {
/*@egen*/
    Identifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtreeCloseNodeScope(jjtn001);
      }
    }
/*@egen*/
  )
}


/* [] Identifier ::= Letter ( Letter | Digit )* */
void Identifier() :
{/*@bgen(jjtree) Identifier */
   Identifier jjtn000 = new Identifier(JJTIDENTIFIER);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtreeOpenNodeScope(jjtn000);
/*@egen*/
   Token t;
}
{/*@bgen(jjtree) Identifier */
   try {
/*@egen*/
   t = <IDENTIFIER>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtreeCloseNodeScope(jjtn000);
    }
/*@egen*/  
    {
        jjtn000.val = t.image; 
        jjtn000.image = t.image; 
        jjtn000.beginColumn = t.beginColumn; 
        jjtn000.endColumn = t.endColumn; 
        jjtn000.beginLine = t.beginLine; 
        jjtn000.endLine = t.endLine; 
    }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
   }
/*@egen*/
}

/* ScopeLimitName ::= 'page' | 'request' | 'session' | 'application' | ...  */
void ScopeLimitName() :
{/*@bgen(jjtree) ScopeLimitName */
   ScopeLimitName jjtn000 = new ScopeLimitName(JJTSCOPELIMITNAME);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtreeOpenNodeScope(jjtn000);
/*@egen*/
   Token t;
}
{/*@bgen(jjtree) ScopeLimitName */
  try {
/*@egen*/
  t = < SCOPE_LIMIT_NAME: ("page:" | "request:" | "session:" | "application:") >/*@bgen(jjtree)*/
                                                                                 {
                                                                                   jjtree.closeNodeScope(jjtn000, true);
                                                                                   jjtc000 = false;
                                                                                   jjtreeCloseNodeScope(jjtn000);
                                                                                 }
/*@egen*/ { jjtn000.val = t.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

/* Literal ::= UnaryLiteral | ListLiteral */
void Literal()       :
{}
{
   UnaryLiteral()
  |
   ListLiteral()
}

/* UnaryLiteral ::= BooleanLiteral | NumberLiteral | StringLiteral */
void UnaryLiteral()       :
{
   Token t;
}
{/*@bgen(jjtree) BooleanLiteral */
 {
   BooleanLiteral jjtn001 = new BooleanLiteral(JJTBOOLEANLITERAL);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
   jjtreeOpenNodeScope(jjtn001);
 }
 try {
/*@egen*/
 (
  t=<BOOLEAN_LITERAL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
      jjtreeCloseNodeScope(jjtn001);
    }
/*@egen*/
    {
       jjtn001.val = Boolean.valueOf(t.image).booleanValue();
    }
 )/*@bgen(jjtree)*/
 } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001, true);
     jjtreeCloseNodeScope(jjtn001);
   }
 }
/*@egen*/
|/*@bgen(jjtree) NumberLiteral */
 {
   NumberLiteral jjtn002 = new NumberLiteral(JJTNUMBERLITERAL);
   boolean jjtc002 = true;
   jjtree.openNodeScope(jjtn002);
   jjtreeOpenNodeScope(jjtn002);
 }
 try {
/*@egen*/ 
 (
  t=<NUMBER_LITERAL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn002, true);
      jjtc002 = false;
      jjtreeCloseNodeScope(jjtn002);
    }
/*@egen*/
    {
       jjtn002.val = Double.parseDouble(t.image);
    }
 )/*@bgen(jjtree)*/
 } finally {
   if (jjtc002) {
     jjtree.closeNodeScope(jjtn002, true);
     jjtreeCloseNodeScope(jjtn002);
   }
 }
/*@egen*/
|/*@bgen(jjtree) StringLiteral */
 {
   StringLiteral jjtn003 = new StringLiteral(JJTSTRINGLITERAL);
   boolean jjtc003 = true;
   jjtree.openNodeScope(jjtn003);
   jjtreeOpenNodeScope(jjtn003);
 }
 try {
/*@egen*/
 (
  t=<STRING_LITERAL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn003, true);
      jjtc003 = false;
      jjtreeCloseNodeScope(jjtn003);
    }
/*@egen*/
    {
       jjtn003.val = t.image.substring(1, (t.image.length() - 1));
    }
 )/*@bgen(jjtree)*/
 } finally {
   if (jjtc003) {
     jjtree.closeNodeScope(jjtn003, true);
     jjtreeCloseNodeScope(jjtn003);
   }
 }
/*@egen*/
}

/* ListLiteral ::= '{' UnaryExpr ( ',' UnaryExpr )* '}' */
void ListLiteral() :
{/*@bgen(jjtree) ListLiteral */
  ListLiteral jjtn000 = new ListLiteral(JJTLISTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ListLiteral */
    try {
/*@egen*/
    <LIST_BEGIN> Expr() ( <SEPARATOR> Expr() )*/*@bgen(jjtree) #ListLiteral(> 1) */
                                                {
                                                  ListLiteral jjtn001 = new ListLiteral(JJTLISTLITERAL);
                                                  boolean jjtc001 = true;
                                                  jjtree.openNodeScope(jjtn001);
                                                  jjtreeOpenNodeScope(jjtn001);
                                                }
                                                try {
/*@egen*/ <LIST_END>/*@bgen(jjtree)*/
                                                } finally {
                                                  if (jjtc001) {
                                                    jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                                                    jjtreeCloseNodeScope(jjtn001);
                                                  }
                                                }
/*@egen*//*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
}


/*-----------------------------------------------*/
/* Unambigious Tokens (Number, Literal)          */
/*-----------------------------------------------*/

TOKEN:
{

/* [] BooleanLiteral ::= "true" | "false"  */
  <BOOLEAN_LITERAL :
    "true"
  |
    "false"
  >

|
 
/* [] StringLiteral ::= '"' [^"]* '"' | "'" [^']* "'"  */
  <STRING_LITERAL :
    "\"" (~["\""])* "\""
  |
    "'"  (~["'"] )* "'"
  >

|

/* [] Digit ::= [0-9]+  */
  <#DIGIT :
    ["0"-"9"]
  >

|

/* [] NumberLiteral ::= Digits ( '.' Digits? )?  | '.' Digits  */
  <NUMBER_LITERAL :
    ("-")? (<DIGIT>)+ ("." ( (<DIGIT>)+ )? )?
|
    ("-")? "." (<DIGIT>)+
  >

|
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
/* [] Letter ::= ['a'-'z'], ['A'-'Z'] */
  < #LETTER: [ "a"-"z", "A"-"Z" ] >
}
