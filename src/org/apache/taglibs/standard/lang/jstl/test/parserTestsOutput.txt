# testing mixture of strings and expressions
Attribute value: abc
Parses to: abc
Attribute value: ${ 3}
Parses to: ${3}
Attribute value: a${
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.parser.ParseException: Encountered "<EOF>" at line 1, column 3.
Was expecting one of:
    <INTEGER_LITERAL> ...
    <FLOATING_POINT_LITERAL> ...
    <STRING_LITERAL> ...
    "true" ...
    "false" ...
    "null" ...
    "(" ...
    "-" ...
    "not" ...
    <IDENTIFIER> ...
    
Attribute value: a${ 5 }
Parses to: a${5}
Attribute value: ${ 3 }b
Parses to: ${3}b
Attribute value: ${ 1 }${ 2 }
Parses to: ${1}${2}
Attribute value: abc ${ 1} ${ 2} def
Parses to: abc ${1} ${2} def

# literals
Attribute value: ${1}
Parses to: ${1}
Attribute value: ${-12}
Parses to: ${-12}
Attribute value: ${true}
Parses to: ${true}
Attribute value: ${false}
Parses to: ${false}
Attribute value: ${null}
Parses to: ${null}
Attribute value: ${4.2}
Parses to: ${4.2}
Attribute value: ${-21.3}
Parses to: ${-21.3}
Attribute value: ${4.}
Parses to: ${4.0}
Attribute value: ${.21}
Parses to: ${0.21}
Attribute value: ${3e-1}
Parses to: ${0.3}
Attribute value: ${.2222222222}
Parses to: ${0.2222222222}

# string literals with "
Attribute value: ${"abc"}
Parses to: ${"abc"}
Attribute value: ${""}
Parses to: ${""}
Attribute value: ${"a"}
Parses to: ${"a"}
Attribute value: ${"         "}
Parses to: ${"         "}
Attribute value: ${" some string ''' "}
Parses to: ${" some string ''' "}
Attribute value: ${" with escaping \\"}
Parses to: ${" with escaping \\"}
Attribute value: ${" with escaping \""}
Parses to: ${" with escaping \""}
Attribute value: ${" with escaping \"\\\""}
Parses to: ${" with escaping \"\\\""}
Attribute value: ${" bad \ escaping"}
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.parser.TokenMgrError: Lexical error at line 1, column 10.  Encountered: " " (32), after : "\" bad \\"
Attribute value: ${" bad \' escaping"}
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.parser.TokenMgrError: Lexical error at line 1, column 10.  Encountered: "\'" (39), after : "\" bad \\"

# string literals with '
Attribute value: ${'abc'}
Parses to: ${"abc"}
Attribute value: ${''}
Parses to: ${""}
Attribute value: ${'a'}
Parses to: ${"a"}
Attribute value: ${'         '}
Parses to: ${"         "}
Attribute value: ${' some string """ '}
Parses to: ${" some string \"\"\" "}
Attribute value: ${' with escaping \\'}
Parses to: ${" with escaping \\"}
Attribute value: ${' with escaping \''}
Parses to: ${" with escaping '"}
Attribute value: ${' with escaping \'\\\''}
Parses to: ${" with escaping '\\'"}
Attribute value: ${' bad \ escaping'}
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.parser.TokenMgrError: Lexical error at line 1, column 10.  Encountered: " " (32), after : "\' bad \\"
Attribute value: ${' bad \" escaping'}
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.parser.TokenMgrError: Lexical error at line 1, column 10.  Encountered: "\"" (34), after : "\' bad \\"

# identifiers
Attribute value: ${abc}
Parses to: ${abc}
Attribute value: ${abc123}
Parses to: ${abc123}
Attribute value: ${abc_123}
Parses to: ${abc_123}
Attribute value: ${bad*identifier}
Parses to: ${(bad * identifier)}

# property accessors
Attribute value: ${a .b .c}
Parses to: ${a.b.c}
Attribute value: ${ abc . 'def.ghi' . ghi . "jkl \"" }
Parses to: ${abc."def.ghi".ghi."jkl \""}

# array accessors
Attribute value: ${ a[14] }
Parses to: ${a[14]}
Attribute value: ${ abc [def]}
Parses to: ${abc[def]}
Attribute value: ${ def ["yesthisisallowed"]}
Parses to: ${def["yesthisisallowed"]}

# mixed property/array accessors
Attribute value: ${ a.b.c[d. e.  f]}
Parses to: ${a.b.c[d.e.f]}
Attribute value: ${ a[14].b[32].c[24][ 261] [24]}
Parses to: ${a[14].b[32].c[24][261][24]}
Attribute value: ${ a[b[c[d[e[f]]]].g] }
Parses to: ${a[b[c[d[e[f]]]].g]}

# mixed operators
Attribute value: ${ 1 + 3 - 2 * 1 == 4}
Parses to: ${((1 + 3 - (2 * 1)) == 4)}
Attribute value: ${ 1 + 3 - 2 * 1 == 4 / 1.2}
Parses to: ${((1 + 3 - (2 * 1)) == (4 / 1.2))}
Attribute value: ${ 1 + 3 - 2 * 1 == 4 / 1.2 and abc}
Parses to: ${(((1 + 3 - (2 * 1)) == (4 / 1.2)) and abc)}
Attribute value: ${ 1 + 3 - 2 * 1 == 4 / 1.2 and abc or def or ghi and true}
Parses to: ${((((1 + 3 - (2 * 1)) == (4 / 1.2)) and abc) or def or (ghi and true))}

# unary operators
Attribute value: ${ --not abc.def }
Parses to: ${(- - not abc.def)}

# array accessors of non-integer types
Attribute value: ${  a ["hello"]."12" [17.5] }
Parses to: ${a["hello"]."12"[17.5]}
