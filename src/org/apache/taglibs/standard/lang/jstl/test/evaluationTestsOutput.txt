# The set of evaluator tests

#######################################################
# basic literals
Expression: ${1}
ExpectedType: int
Evaluates to: 1
With type: java.lang.Integer

Expression: ${-12}
ExpectedType: int
Evaluates to: -12
With type: java.lang.Integer

Expression: ${true}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean

Expression: ${false}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean

Expression: ${null}
ExpectedType: class java.lang.String
Evaluates to: 
With type: java.lang.String

Expression: ${4.2}
ExpectedType: double
Evaluates to: 4.2
With type: java.lang.Double

Expression: ${-21.3}
ExpectedType: float
Evaluates to: -21.3
With type: java.lang.Float

Expression: ${4.}
ExpectedType: float
Evaluates to: 4.0
With type: java.lang.Float

Expression: ${.21}
ExpectedType: float
Evaluates to: 0.21
With type: java.lang.Float

Expression: ${3e-1}
ExpectedType: double
Evaluates to: 0.3
With type: java.lang.Double

Expression: ${.2222222222}
ExpectedType: double
Evaluates to: 0.2222222222
With type: java.lang.Double



#######################################################
# basic relationals between literals

Expression: ${1 < 2}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean

Expression: ${1 > 2}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean

Expression: ${1 >= 2}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean

Expression: ${1 <= 2}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean

Expression: ${1 == 2}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean

Expression: ${1 != 2}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean

Expression: ${3 >= 3}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean

Expression: ${3 <= 3}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean

Expression: ${3 == 3}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean

Expression: ${3 < 3}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean

Expression: ${3 > 3}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean

Expression: ${3 != 3}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean



#######################################################
# relationals between booleans

Expression: ${false < true}
ExpectedType: class java.lang.Object
Causes an error: Attempt to apply operator "<" to arguments of type "java.lang.Boolean" and "java.lang.Boolean"
Expression: ${false > true}
ExpectedType: class java.lang.Object
Causes an error: Attempt to apply operator ">" to arguments of type "java.lang.Boolean" and "java.lang.Boolean"
Expression: ${true >= true}
ExpectedType: class java.lang.Object
Evaluates to: true
With type: java.lang.Boolean

Expression: ${true <= true}
ExpectedType: class java.lang.Object
Evaluates to: true
With type: java.lang.Boolean

Expression: ${true == true}
ExpectedType: class java.lang.Object
Evaluates to: true
With type: java.lang.Boolean

Expression: ${true != true}
ExpectedType: class java.lang.Object
Evaluates to: false
With type: java.lang.Boolean


#######################################################
# looking up objects in scopes

# val1a - defined in page scope
Expression: ${page:val1a}
ExpectedType: class java.lang.String
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered ":" at line 1, column 7.
Was expecting one of:
    "}" ...
    "." ...
    ">" ...
    "gt" ...
    "<" ...
    "lt" ...
    "==" ...
    "<=" ...
    "le" ...
    ">=" ...
    "ge" ...
    "!=" ...
    "[" ...
    "+" ...
    "-" ...
    "*" ...
    "/" ...
    "div" ...
    "%" ...
    "mod" ...
    "and" ...
    "or" ...
    
Expression: ${request:val1a}
ExpectedType: class java.lang.String
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered ":" at line 1, column 10.
Was expecting one of:
    "}" ...
    "." ...
    ">" ...
    "gt" ...
    "<" ...
    "lt" ...
    "==" ...
    "<=" ...
    "le" ...
    ">=" ...
    "ge" ...
    "!=" ...
    "[" ...
    "+" ...
    "-" ...
    "*" ...
    "/" ...
    "div" ...
    "%" ...
    "mod" ...
    "and" ...
    "or" ...
    
Expression: ${session:val1a}
ExpectedType: class java.lang.String
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered ":" at line 1, column 10.
Was expecting one of:
    "}" ...
    "." ...
    ">" ...
    "gt" ...
    "<" ...
    "lt" ...
    "==" ...
    "<=" ...
    "le" ...
    ">=" ...
    "ge" ...
    "!=" ...
    "[" ...
    "+" ...
    "-" ...
    "*" ...
    "/" ...
    "div" ...
    "%" ...
    "mod" ...
    "and" ...
    "or" ...
    
Expression: ${app:val1a}
ExpectedType: class java.lang.String
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered ":" at line 1, column 6.
Was expecting one of:
    "}" ...
    "." ...
    ">" ...
    "gt" ...
    "<" ...
    "lt" ...
    "==" ...
    "<=" ...
    "le" ...
    ">=" ...
    "ge" ...
    "!=" ...
    "[" ...
    "+" ...
    "-" ...
    "*" ...
    "/" ...
    "div" ...
    "%" ...
    "mod" ...
    "and" ...
    "or" ...
    
Expression: ${val1a}
ExpectedType: class java.lang.String
Evaluates to: page-scoped1
With type: java.lang.String


# val1b - defined in request scope
Expression: ${page:val1b}
ExpectedType: class java.lang.String
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered ":" at line 1, column 7.
Was expecting one of:
    "}" ...
    "." ...
    ">" ...
    "gt" ...
    "<" ...
    "lt" ...
    "==" ...
    "<=" ...
    "le" ...
    ">=" ...
    "ge" ...
    "!=" ...
    "[" ...
    "+" ...
    "-" ...
    "*" ...
    "/" ...
    "div" ...
    "%" ...
    "mod" ...
    "and" ...
    "or" ...
    
Expression: ${request:val1b}
ExpectedType: class java.lang.String
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered ":" at line 1, column 10.
Was expecting one of:
    "}" ...
    "." ...
    ">" ...
    "gt" ...
    "<" ...
    "lt" ...
    "==" ...
    "<=" ...
    "le" ...
    ">=" ...
    "ge" ...
    "!=" ...
    "[" ...
    "+" ...
    "-" ...
    "*" ...
    "/" ...
    "div" ...
    "%" ...
    "mod" ...
    "and" ...
    "or" ...
    
Expression: ${session:val1b}
ExpectedType: class java.lang.String
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered ":" at line 1, column 10.
Was expecting one of:
    "}" ...
    "." ...
    ">" ...
    "gt" ...
    "<" ...
    "lt" ...
    "==" ...
    "<=" ...
    "le" ...
    ">=" ...
    "ge" ...
    "!=" ...
    "[" ...
    "+" ...
    "-" ...
    "*" ...
    "/" ...
    "div" ...
    "%" ...
    "mod" ...
    "and" ...
    "or" ...
    
Expression: ${app:val1b}
ExpectedType: class java.lang.String
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered ":" at line 1, column 6.
Was expecting one of:
    "}" ...
    "." ...
    ">" ...
    "gt" ...
    "<" ...
    "lt" ...
    "==" ...
    "<=" ...
    "le" ...
    ">=" ...
    "ge" ...
    "!=" ...
    "[" ...
    "+" ...
    "-" ...
    "*" ...
    "/" ...
    "div" ...
    "%" ...
    "mod" ...
    "and" ...
    "or" ...
    
Expression: ${val1b}
ExpectedType: class java.lang.String
Evaluates to: request-scoped1
With type: java.lang.String


# val1c - defined in session scope
Expression: ${page:val1c}
ExpectedType: class java.lang.String
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered ":" at line 1, column 7.
Was expecting one of:
    "}" ...
    "." ...
    ">" ...
    "gt" ...
    "<" ...
    "lt" ...
    "==" ...
    "<=" ...
    "le" ...
    ">=" ...
    "ge" ...
    "!=" ...
    "[" ...
    "+" ...
    "-" ...
    "*" ...
    "/" ...
    "div" ...
    "%" ...
    "mod" ...
    "and" ...
    "or" ...
    
Expression: ${request:val1c}
ExpectedType: class java.lang.String
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered ":" at line 1, column 10.
Was expecting one of:
    "}" ...
    "." ...
    ">" ...
    "gt" ...
    "<" ...
    "lt" ...
    "==" ...
    "<=" ...
    "le" ...
    ">=" ...
    "ge" ...
    "!=" ...
    "[" ...
    "+" ...
    "-" ...
    "*" ...
    "/" ...
    "div" ...
    "%" ...
    "mod" ...
    "and" ...
    "or" ...
    
Expression: ${session:val1c}
ExpectedType: class java.lang.String
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered ":" at line 1, column 10.
Was expecting one of:
    "}" ...
    "." ...
    ">" ...
    "gt" ...
    "<" ...
    "lt" ...
    "==" ...
    "<=" ...
    "le" ...
    ">=" ...
    "ge" ...
    "!=" ...
    "[" ...
    "+" ...
    "-" ...
    "*" ...
    "/" ...
    "div" ...
    "%" ...
    "mod" ...
    "and" ...
    "or" ...
    
Expression: ${app:val1c}
ExpectedType: class java.lang.String
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered ":" at line 1, column 6.
Was expecting one of:
    "}" ...
    "." ...
    ">" ...
    "gt" ...
    "<" ...
    "lt" ...
    "==" ...
    "<=" ...
    "le" ...
    ">=" ...
    "ge" ...
    "!=" ...
    "[" ...
    "+" ...
    "-" ...
    "*" ...
    "/" ...
    "div" ...
    "%" ...
    "mod" ...
    "and" ...
    "or" ...
    
Expression: ${val1c}
ExpectedType: class java.lang.String
Evaluates to: session-scoped1
With type: java.lang.String


# val1d - defined in application scope
Expression: ${page:val1d}
ExpectedType: class java.lang.String
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered ":" at line 1, column 7.
Was expecting one of:
    "}" ...
    "." ...
    ">" ...
    "gt" ...
    "<" ...
    "lt" ...
    "==" ...
    "<=" ...
    "le" ...
    ">=" ...
    "ge" ...
    "!=" ...
    "[" ...
    "+" ...
    "-" ...
    "*" ...
    "/" ...
    "div" ...
    "%" ...
    "mod" ...
    "and" ...
    "or" ...
    
Expression: ${request:val1d}
ExpectedType: class java.lang.String
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered ":" at line 1, column 10.
Was expecting one of:
    "}" ...
    "." ...
    ">" ...
    "gt" ...
    "<" ...
    "lt" ...
    "==" ...
    "<=" ...
    "le" ...
    ">=" ...
    "ge" ...
    "!=" ...
    "[" ...
    "+" ...
    "-" ...
    "*" ...
    "/" ...
    "div" ...
    "%" ...
    "mod" ...
    "and" ...
    "or" ...
    
Expression: ${session:val1d}
ExpectedType: class java.lang.String
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered ":" at line 1, column 10.
Was expecting one of:
    "}" ...
    "." ...
    ">" ...
    "gt" ...
    "<" ...
    "lt" ...
    "==" ...
    "<=" ...
    "le" ...
    ">=" ...
    "ge" ...
    "!=" ...
    "[" ...
    "+" ...
    "-" ...
    "*" ...
    "/" ...
    "div" ...
    "%" ...
    "mod" ...
    "and" ...
    "or" ...
    
Expression: ${app:val1d}
ExpectedType: class java.lang.String
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered ":" at line 1, column 6.
Was expecting one of:
    "}" ...
    "." ...
    ">" ...
    "gt" ...
    "<" ...
    "lt" ...
    "==" ...
    "<=" ...
    "le" ...
    ">=" ...
    "ge" ...
    "!=" ...
    "[" ...
    "+" ...
    "-" ...
    "*" ...
    "/" ...
    "div" ...
    "%" ...
    "mod" ...
    "and" ...
    "or" ...
    
Expression: ${val1d}
ExpectedType: class java.lang.String
Evaluates to: app-scoped1
With type: java.lang.String


#######################################################
# accessing properties

Expression: ${bean1a.int1}
ExpectedType: int
Evaluates to: 4
With type: java.lang.Integer

Expression: ${bean1a.boolean1}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean

Expression: ${bean1a.string1}
ExpectedType: class java.lang.String
Evaluates to: hello
With type: java.lang.String

Expression: ${bean1a.bean1.int2}
ExpectedType: int
Evaluates to: -224
With type: java.lang.Integer

Expression: ${bean1a.bean1.bean2.string2}
ExpectedType: class java.lang.String
Evaluates to: bean3's string
With type: java.lang.String


#######################################################
# test the entire conversion matrix

Expression: ${bean1a.byte1}
ExpectedType: byte
Evaluates to: 12
With type: java.lang.Byte

Expression: ${bean1a.byte1}
ExpectedType: char
Evaluates to: 
With type: java.lang.Character

Expression: ${bean1a.byte1}
ExpectedType: short
Evaluates to: 12
With type: java.lang.Short

Expression: ${bean1a.byte1}
ExpectedType: int
Evaluates to: 12
With type: java.lang.Integer

Expression: ${bean1a.byte1}
ExpectedType: long
Evaluates to: 12
With type: java.lang.Long

Expression: ${bean1a.byte1}
ExpectedType: float
Evaluates to: 12.0
With type: java.lang.Float

Expression: ${bean1a.byte1}
ExpectedType: double
Evaluates to: 12.0
With type: java.lang.Double


Expression: ${bean1a.char1}
ExpectedType: byte
Evaluates to: 98
With type: java.lang.Byte

Expression: ${bean1a.char1}
ExpectedType: char
Evaluates to: b
With type: java.lang.Character

Expression: ${bean1a.char1}
ExpectedType: short
Evaluates to: 98
With type: java.lang.Short

Expression: ${bean1a.char1}
ExpectedType: int
Evaluates to: 98
With type: java.lang.Integer

Expression: ${bean1a.char1}
ExpectedType: long
Evaluates to: 98
With type: java.lang.Long

Expression: ${bean1a.char1}
ExpectedType: float
Evaluates to: 98.0
With type: java.lang.Float

Expression: ${bean1a.char1}
ExpectedType: double
Evaluates to: 98.0
With type: java.lang.Double


Expression: ${bean1a.short1}
ExpectedType: byte
Evaluates to: -124
With type: java.lang.Byte

Expression: ${bean1a.short1}
ExpectedType: char
Evaluates to: ?
With type: java.lang.Character

Expression: ${bean1a.short1}
ExpectedType: short
Evaluates to: -124
With type: java.lang.Short

Expression: ${bean1a.short1}
ExpectedType: int
Evaluates to: -124
With type: java.lang.Integer

Expression: ${bean1a.short1}
ExpectedType: long
Evaluates to: -124
With type: java.lang.Long

Expression: ${bean1a.short1}
ExpectedType: float
Evaluates to: -124.0
With type: java.lang.Float

Expression: ${bean1a.short1}
ExpectedType: double
Evaluates to: -124.0
With type: java.lang.Double


Expression: ${bean1a.int1}
ExpectedType: byte
Evaluates to: 4
With type: java.lang.Byte

Expression: ${bean1a.int1}
ExpectedType: char
Evaluates to: 
With type: java.lang.Character

Expression: ${bean1a.int1}
ExpectedType: short
Evaluates to: 4
With type: java.lang.Short

Expression: ${bean1a.int1}
ExpectedType: int
Evaluates to: 4
With type: java.lang.Integer

Expression: ${bean1a.int1}
ExpectedType: long
Evaluates to: 4
With type: java.lang.Long

Expression: ${bean1a.int1}
ExpectedType: float
Evaluates to: 4.0
With type: java.lang.Float

Expression: ${bean1a.int1}
ExpectedType: double
Evaluates to: 4.0
With type: java.lang.Double


Expression: ${bean1a.long1}
ExpectedType: byte
Evaluates to: -41
With type: java.lang.Byte

Expression: ${bean1a.long1}
ExpectedType: char
Evaluates to: ?
With type: java.lang.Character

Expression: ${bean1a.long1}
ExpectedType: short
Evaluates to: 25815
With type: java.lang.Short

Expression: ${bean1a.long1}
ExpectedType: int
Evaluates to: 222423
With type: java.lang.Integer

Expression: ${bean1a.long1}
ExpectedType: long
Evaluates to: 222423
With type: java.lang.Long

Expression: ${bean1a.long1}
ExpectedType: float
Evaluates to: 222423.0
With type: java.lang.Float

Expression: ${bean1a.long1}
ExpectedType: double
Evaluates to: 222423.0
With type: java.lang.Double


Expression: ${bean1a.float1}
ExpectedType: byte
Evaluates to: 12
With type: java.lang.Byte

Expression: ${bean1a.float1}
ExpectedType: char
Evaluates to: 
With type: java.lang.Character

Expression: ${bean1a.float1}
ExpectedType: short
Evaluates to: 12
With type: java.lang.Short

Expression: ${bean1a.float1}
ExpectedType: int
Evaluates to: 12
With type: java.lang.Integer

Expression: ${bean1a.float1}
ExpectedType: long
Evaluates to: 12
With type: java.lang.Long

Expression: ${bean1a.float1}
ExpectedType: float
Evaluates to: 12.4
With type: java.lang.Float

Expression: ${bean1a.float1}
ExpectedType: double
Evaluates to: 12.399999618530273
With type: java.lang.Double


Expression: ${bean1a.double1}
ExpectedType: byte
Evaluates to: 89
With type: java.lang.Byte

Expression: ${bean1a.double1}
ExpectedType: char
Evaluates to: Y
With type: java.lang.Character

Expression: ${bean1a.double1}
ExpectedType: short
Evaluates to: 89
With type: java.lang.Short

Expression: ${bean1a.double1}
ExpectedType: int
Evaluates to: 89
With type: java.lang.Integer

Expression: ${bean1a.double1}
ExpectedType: long
Evaluates to: 89
With type: java.lang.Long

Expression: ${bean1a.double1}
ExpectedType: float
Evaluates to: 89.224
With type: java.lang.Float

Expression: ${bean1a.double1}
ExpectedType: double
Evaluates to: 89.224
With type: java.lang.Double


#######################################################
# test the entire relational comparison type promotion matrix

Expression: ${bean1a.byte1 < bean1a.byte1}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean

Expression: ${bean1a.byte1 < bean1a.char1}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean

Expression: ${bean1a.byte1 < bean1a.short1}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean

Expression: ${bean1a.byte1 < bean1a.int1}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean

Expression: ${bean1a.byte1 < bean1a.long1}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean

Expression: ${bean1a.byte1 < bean1a.float1}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean

Expression: ${bean1a.byte1 < bean1a.double1}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean


Expression: ${bean1a.char1 < bean1a.byte1}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean

Expression: ${bean1a.char1 < bean1a.char1}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean

Expression: ${bean1a.char1 < bean1a.short1}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean

Expression: ${bean1a.char1 < bean1a.int1}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean

Expression: ${bean1a.char1 < bean1a.long1}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean

Expression: ${bean1a.char1 < bean1a.float1}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean

Expression: ${bean1a.char1 < bean1a.double1}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean


Expression: ${bean1a.short1 < bean1a.byte1}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean

Expression: ${bean1a.short1 < bean1a.char1}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean

Expression: ${bean1a.short1 < bean1a.short1}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean

Expression: ${bean1a.short1 < bean1a.int1}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean

Expression: ${bean1a.short1 < bean1a.long1}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean

Expression: ${bean1a.short1 < bean1a.float1}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean

Expression: ${bean1a.short1 < bean1a.double1}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean


Expression: ${bean1a.int1 < bean1a.byte1}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean

Expression: ${bean1a.int1 < bean1a.char1}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean

Expression: ${bean1a.int1 < bean1a.short1}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean

Expression: ${bean1a.int1 < bean1a.int1}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean

Expression: ${bean1a.int1 < bean1a.long1}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean

Expression: ${bean1a.int1 < bean1a.float1}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean

Expression: ${bean1a.int1 < bean1a.double1}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean


Expression: ${bean1a.long1 < bean1a.byte1}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean

Expression: ${bean1a.long1 < bean1a.char1}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean

Expression: ${bean1a.long1 < bean1a.short1}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean

Expression: ${bean1a.long1 < bean1a.int1}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean

Expression: ${bean1a.long1 < bean1a.long1}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean

Expression: ${bean1a.long1 < bean1a.float1}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean

Expression: ${bean1a.long1 < bean1a.double1}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean


Expression: ${bean1a.float1 < bean1a.byte1}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean

Expression: ${bean1a.float1 < bean1a.char1}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean

Expression: ${bean1a.float1 < bean1a.short1}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean

Expression: ${bean1a.float1 < bean1a.int1}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean

Expression: ${bean1a.float1 < bean1a.long1}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean

Expression: ${bean1a.float1 < bean1a.float1}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean

Expression: ${bean1a.float1 < bean1a.double1}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean


Expression: ${bean1a.double1 < bean1a.byte1}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean

Expression: ${bean1a.double1 < bean1a.char1}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean

Expression: ${bean1a.double1 < bean1a.short1}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean

Expression: ${bean1a.double1 < bean1a.int1}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean

Expression: ${bean1a.double1 < bean1a.long1}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean

Expression: ${bean1a.double1 < bean1a.float1}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean

Expression: ${bean1a.double1 < bean1a.double1}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean


#######################################################
# test other relational comparison rules

Expression: ${null == null}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean

Expression: ${noSuchAttribute == noSuchAttribute}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean

Expression: ${noSuchAttribute == null}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean

Expression: ${null == noSuchAttribute}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean

Expression: ${bean1a == null}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean

Expression: ${null == bean1a}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean

Expression: ${bean1a == bean1a}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean

Expression: ${bean1a > "hello"}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean

Expression: ${bean1a.bean1 < 14}
ExpectedType: boolean
Causes an error: Attempt to coerce a value of type "org.apache.taglibs.standard.lang.jstl.test.Bean1" to type "java.lang.Long"
Expression: ${bean1a.bean1 == "hello"}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean


#######################################################
# test String comparisons

Expression: ${bean1a.string1 == "hello"}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean

Expression: ${bean1a.string1 != "hello"}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean

Expression: ${bean1a.string1 == "goodbye"}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean

Expression: ${bean1a.string1 != "goodbye"}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean

Expression: ${bean1a.string1 > "goodbye"}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean

Expression: ${"hello" == bean1a.string1}
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean

Expression: ${"goodbye" > bean1a.string1}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean


#######################################################
# test errors in property traversal

Expression: ${noSuchAttribute.abc}
ExpectedType: class java.lang.Object
Evaluates to: null

Expression: ${bean1a.bean2.byte1}
ExpectedType: class java.lang.Object
Evaluates to: null

Expression: ${bean1a.noProperty}
ExpectedType: class java.lang.Object
Causes an error: Unable to find a value for "noProperty" in object of class "org.apache.taglibs.standard.lang.jstl.test.Bean1" using operator "."
Expression: ${bean1a.noGetter}
ExpectedType: class java.lang.Object
Causes an error: Unable to find a value for "noGetter" in object of class "org.apache.taglibs.standard.lang.jstl.test.Bean1" using operator "."
Expression: ${bean1a.errorInGetter}
ExpectedType: class java.lang.Object
Causes an error: An error occurred while getting property "errorInGetter" from an instance of class org.apache.taglibs.standard.lang.jstl.test.Bean1: java.lang.NullPointerException: Error!
Expression: ${bean1a.bean2.string2}
ExpectedType: class java.lang.Object
Evaluates to: null


#######################################################
# test accessing public properties from private classes

Expression: ${pbean1.value}
ExpectedType: class java.lang.Object
Evaluates to: got the value
With type: java.lang.String

Expression: ${pbean2.value}
ExpectedType: class java.lang.Object
Evaluates to: got the value
With type: java.lang.String

Expression: ${pbean3.value}
ExpectedType: class java.lang.Object
Evaluates to: got the value
With type: java.lang.String

Expression: ${pbean4.value}
ExpectedType: class java.lang.Object
Evaluates to: got the value
With type: java.lang.String

Expression: ${pbean5.value}
ExpectedType: class java.lang.Object
Evaluates to: got the value
With type: java.lang.String

Expression: ${pbean6.value}
ExpectedType: class java.lang.Object
Evaluates to: got the value
With type: java.lang.String

Expression: ${pbean7.value}
ExpectedType: class java.lang.Object
Evaluates to: got the value
With type: java.lang.String


#######################################################
# test literal conversions

Expression: true
ExpectedType: boolean
Evaluates to: true
With type: java.lang.Boolean

Expression: false
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean

Expression: 12
ExpectedType: byte
Evaluates to: 12
With type: java.lang.Byte

Expression: 12
ExpectedType: char
Evaluates to: 1
With type: java.lang.Character

Expression: 12
ExpectedType: short
Evaluates to: 12
With type: java.lang.Short

Expression: 12
ExpectedType: int
Evaluates to: 12
With type: java.lang.Integer

Expression: 12
ExpectedType: long
Evaluates to: 12
With type: java.lang.Long

Expression: 12
ExpectedType: float
Evaluates to: 12.0
With type: java.lang.Float

Expression: 12
ExpectedType: double
Evaluates to: 12.0
With type: java.lang.Double


Expression: hello
ExpectedType: class org.apache.taglibs.standard.lang.jstl.test.Bean2
Evaluates to: Bean2[hello]
With type: org.apache.taglibs.standard.lang.jstl.test.Bean2

Expression: badvalue
ExpectedType: class org.apache.taglibs.standard.lang.jstl.test.Bean2
Causes an error: Unable to parse value "badvalue" into expected type "org.apache.taglibs.standard.lang.jstl.test.Bean2": java.lang.IllegalArgumentException: Bad value badvalue
Expression: hello
ExpectedType: class org.apache.taglibs.standard.lang.jstl.test.Bean1
Causes an error: Attempt to convert String "hello" to type "org.apache.taglibs.standard.lang.jstl.test.Bean1", but there is no PropertyEditor for that type

#######################################################
# test null values bumped up to constants

Expression: ${null}
ExpectedType: boolean
Evaluates to: false
With type: java.lang.Boolean

Expression: ${null}
ExpectedType: byte
Evaluates to: 0
With type: java.lang.Byte

Expression: ${null}
ExpectedType: short
Evaluates to: 0
With type: java.lang.Short

Expression: ${null}
ExpectedType: char
Evaluates to:  
With type: java.lang.Character

Expression: ${null}
ExpectedType: int
Evaluates to: 0
With type: java.lang.Integer

Expression: ${null}
ExpectedType: long
Evaluates to: 0
With type: java.lang.Long

Expression: ${null}
ExpectedType: float
Evaluates to: 0.0
With type: java.lang.Float

Expression: ${null}
ExpectedType: double
Evaluates to: 0.0
With type: java.lang.Double

Expression: ${null}
ExpectedType: class java.lang.Boolean
Evaluates to: false
With type: java.lang.Boolean

Expression: ${null}
ExpectedType: class java.lang.Byte
Evaluates to: 0
With type: java.lang.Byte

Expression: ${null}
ExpectedType: class java.lang.Short
Evaluates to: 0
With type: java.lang.Short

Expression: ${null}
ExpectedType: class java.lang.Character
Evaluates to:  
With type: java.lang.Character

Expression: ${null}
ExpectedType: class java.lang.Integer
Evaluates to: 0
With type: java.lang.Integer

Expression: ${null}
ExpectedType: class java.lang.Long
Evaluates to: 0
With type: java.lang.Long

Expression: ${null}
ExpectedType: class java.lang.Float
Evaluates to: 0.0
With type: java.lang.Float

Expression: ${null}
ExpectedType: class java.lang.Double
Evaluates to: 0.0
With type: java.lang.Double



#######################################################
# test reserved words as identifiers

Expression: ${and}
ExpectedType: class java.lang.Object
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered "and" at line 1, column 3.
Was expecting one of:
    <INTEGER_LITERAL> ...
    <FLOATING_POINT_LITERAL> ...
    <STRING_LITERAL> ...
    "true" ...
    "false" ...
    "null" ...
    "(" ...
    "-" ...
    "not" ...
    "pageContext" ...
    "page" ...
    "request" ...
    "session" ...
    "application" ...
    "param" ...
    "params" ...
    <IDENTIFIER> ...
    
Expression: ${or}
ExpectedType: class java.lang.Object
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered "or" at line 1, column 3.
Was expecting one of:
    <INTEGER_LITERAL> ...
    <FLOATING_POINT_LITERAL> ...
    <STRING_LITERAL> ...
    "true" ...
    "false" ...
    "null" ...
    "(" ...
    "-" ...
    "not" ...
    "pageContext" ...
    "page" ...
    "request" ...
    "session" ...
    "application" ...
    "param" ...
    "params" ...
    <IDENTIFIER> ...
    
Expression: ${not}
ExpectedType: class java.lang.Object
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered "}" at line 1, column 6.
Was expecting one of:
    <INTEGER_LITERAL> ...
    <FLOATING_POINT_LITERAL> ...
    <STRING_LITERAL> ...
    "true" ...
    "false" ...
    "null" ...
    "(" ...
    "-" ...
    "not" ...
    "pageContext" ...
    "page" ...
    "request" ...
    "session" ...
    "application" ...
    "param" ...
    "params" ...
    <IDENTIFIER> ...
    
Expression: ${eq}
ExpectedType: class java.lang.Object
Evaluates to: null

Expression: ${ne}
ExpectedType: class java.lang.Object
Evaluates to: null

Expression: ${lt}
ExpectedType: class java.lang.Object
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered "lt" at line 1, column 3.
Was expecting one of:
    <INTEGER_LITERAL> ...
    <FLOATING_POINT_LITERAL> ...
    <STRING_LITERAL> ...
    "true" ...
    "false" ...
    "null" ...
    "(" ...
    "-" ...
    "not" ...
    "pageContext" ...
    "page" ...
    "request" ...
    "session" ...
    "application" ...
    "param" ...
    "params" ...
    <IDENTIFIER> ...
    
Expression: ${gt}
ExpectedType: class java.lang.Object
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered "gt" at line 1, column 3.
Was expecting one of:
    <INTEGER_LITERAL> ...
    <FLOATING_POINT_LITERAL> ...
    <STRING_LITERAL> ...
    "true" ...
    "false" ...
    "null" ...
    "(" ...
    "-" ...
    "not" ...
    "pageContext" ...
    "page" ...
    "request" ...
    "session" ...
    "application" ...
    "param" ...
    "params" ...
    <IDENTIFIER> ...
    
Expression: ${le}
ExpectedType: class java.lang.Object
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered "le" at line 1, column 3.
Was expecting one of:
    <INTEGER_LITERAL> ...
    <FLOATING_POINT_LITERAL> ...
    <STRING_LITERAL> ...
    "true" ...
    "false" ...
    "null" ...
    "(" ...
    "-" ...
    "not" ...
    "pageContext" ...
    "page" ...
    "request" ...
    "session" ...
    "application" ...
    "param" ...
    "params" ...
    <IDENTIFIER> ...
    
Expression: ${ge}
ExpectedType: class java.lang.Object
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered "ge" at line 1, column 3.
Was expecting one of:
    <INTEGER_LITERAL> ...
    <FLOATING_POINT_LITERAL> ...
    <STRING_LITERAL> ...
    "true" ...
    "false" ...
    "null" ...
    "(" ...
    "-" ...
    "not" ...
    "pageContext" ...
    "page" ...
    "request" ...
    "session" ...
    "application" ...
    "param" ...
    "params" ...
    <IDENTIFIER> ...
    
Expression: ${instanceof}
ExpectedType: class java.lang.Object
Evaluates to: null

Expression: ${page}
ExpectedType: class java.lang.Object
Evaluates to: org.apache.taglibs.standard.lang.jstl.ImplicitObjects$1@599a4d
With type: org.apache.taglibs.standard.lang.jstl.ImplicitObjects$1

Expression: ${request}
ExpectedType: class java.lang.Object
Evaluates to: org.apache.taglibs.standard.lang.jstl.ImplicitObjects$2@49ba38
With type: org.apache.taglibs.standard.lang.jstl.ImplicitObjects$2

Expression: ${session}
ExpectedType: class java.lang.Object
Evaluates to: org.apache.taglibs.standard.lang.jstl.ImplicitObjects$3@6859c0
With type: org.apache.taglibs.standard.lang.jstl.ImplicitObjects$3

Expression: ${app}
ExpectedType: class java.lang.Object
Evaluates to: null

Expression: ${true}
ExpectedType: class java.lang.Object
Evaluates to: true
With type: java.lang.Boolean

Expression: ${false}
ExpectedType: class java.lang.Object
Evaluates to: false
With type: java.lang.Boolean

Expression: ${null}
ExpectedType: class java.lang.Object
Evaluates to: null



#######################################################
# test reserved words as property names

Expression: ${bean1a.and}
ExpectedType: class java.lang.Object
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered "and" at line 1, column 10.
Was expecting one of:
    <STRING_LITERAL> ...
    "pageContext" ...
    "page" ...
    "request" ...
    "session" ...
    "application" ...
    "param" ...
    "params" ...
    <IDENTIFIER> ...
    
Expression: ${bean1a.or}
ExpectedType: class java.lang.Object
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered "or" at line 1, column 10.
Was expecting one of:
    <STRING_LITERAL> ...
    "pageContext" ...
    "page" ...
    "request" ...
    "session" ...
    "application" ...
    "param" ...
    "params" ...
    <IDENTIFIER> ...
    
Expression: ${bean1a.not}
ExpectedType: class java.lang.Object
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered "not" at line 1, column 10.
Was expecting one of:
    <STRING_LITERAL> ...
    "pageContext" ...
    "page" ...
    "request" ...
    "session" ...
    "application" ...
    "param" ...
    "params" ...
    <IDENTIFIER> ...
    
Expression: ${bean1a.eq}
ExpectedType: class java.lang.Object
Causes an error: Unable to find a value for "eq" in object of class "org.apache.taglibs.standard.lang.jstl.test.Bean1" using operator "."
Expression: ${bean1a.ne}
ExpectedType: class java.lang.Object
Causes an error: Unable to find a value for "ne" in object of class "org.apache.taglibs.standard.lang.jstl.test.Bean1" using operator "."
Expression: ${bean1a.lt}
ExpectedType: class java.lang.Object
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered "lt" at line 1, column 10.
Was expecting one of:
    <STRING_LITERAL> ...
    "pageContext" ...
    "page" ...
    "request" ...
    "session" ...
    "application" ...
    "param" ...
    "params" ...
    <IDENTIFIER> ...
    
Expression: ${bean1a.gt}
ExpectedType: class java.lang.Object
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered "gt" at line 1, column 10.
Was expecting one of:
    <STRING_LITERAL> ...
    "pageContext" ...
    "page" ...
    "request" ...
    "session" ...
    "application" ...
    "param" ...
    "params" ...
    <IDENTIFIER> ...
    
Expression: ${bean1a.le}
ExpectedType: class java.lang.Object
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered "le" at line 1, column 10.
Was expecting one of:
    <STRING_LITERAL> ...
    "pageContext" ...
    "page" ...
    "request" ...
    "session" ...
    "application" ...
    "param" ...
    "params" ...
    <IDENTIFIER> ...
    
Expression: ${bean1a.ge}
ExpectedType: class java.lang.Object
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered "ge" at line 1, column 10.
Was expecting one of:
    <STRING_LITERAL> ...
    "pageContext" ...
    "page" ...
    "request" ...
    "session" ...
    "application" ...
    "param" ...
    "params" ...
    <IDENTIFIER> ...
    
Expression: ${bean1a.instanceof}
ExpectedType: class java.lang.Object
Causes an error: Unable to find a value for "instanceof" in object of class "org.apache.taglibs.standard.lang.jstl.test.Bean1" using operator "."
Expression: ${bean1a.page}
ExpectedType: class java.lang.Object
Causes an error: Unable to find a value for "page" in object of class "org.apache.taglibs.standard.lang.jstl.test.Bean1" using operator "."
Expression: ${bean1a.request}
ExpectedType: class java.lang.Object
Causes an error: Unable to find a value for "request" in object of class "org.apache.taglibs.standard.lang.jstl.test.Bean1" using operator "."
Expression: ${bean1a.session}
ExpectedType: class java.lang.Object
Causes an error: Unable to find a value for "session" in object of class "org.apache.taglibs.standard.lang.jstl.test.Bean1" using operator "."
Expression: ${bean1a.app}
ExpectedType: class java.lang.Object
Causes an error: Unable to find a value for "app" in object of class "org.apache.taglibs.standard.lang.jstl.test.Bean1" using operator "."
Expression: ${bean1a.true}
ExpectedType: class java.lang.Object
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered "true" at line 1, column 10.
Was expecting one of:
    <STRING_LITERAL> ...
    "pageContext" ...
    "page" ...
    "request" ...
    "session" ...
    "application" ...
    "param" ...
    "params" ...
    <IDENTIFIER> ...
    
Expression: ${bean1a.false}
ExpectedType: class java.lang.Object
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered "false" at line 1, column 10.
Was expecting one of:
    <STRING_LITERAL> ...
    "pageContext" ...
    "page" ...
    "request" ...
    "session" ...
    "application" ...
    "param" ...
    "params" ...
    <IDENTIFIER> ...
    
Expression: ${bean1a.null}
ExpectedType: class java.lang.Object
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered "null" at line 1, column 10.
Was expecting one of:
    <STRING_LITERAL> ...
    "pageContext" ...
    "page" ...
    "request" ...
    "session" ...
    "application" ...
    "param" ...
    "params" ...
    <IDENTIFIER> ...
    

#######################################################
# test arithmetic

Expression: ${3+5}
ExpectedType: class java.lang.Object
Evaluates to: 8
With type: java.lang.Long

Expression: ${3-5}
ExpectedType: class java.lang.Object
Evaluates to: -2
With type: java.lang.Long

Expression: ${3/5}
ExpectedType: class java.lang.Object
Evaluates to: 0.6
With type: java.lang.Double

Expression: ${3*5}
ExpectedType: class java.lang.Object
Evaluates to: 15
With type: java.lang.Long

Expression: ${3*5.0}
ExpectedType: class java.lang.Object
Evaluates to: 15.0
With type: java.lang.Double

Expression: ${3.0*5}
ExpectedType: class java.lang.Object
Evaluates to: 15.0
With type: java.lang.Double

Expression: ${3.0*5.0}
ExpectedType: class java.lang.Object
Evaluates to: 15.0
With type: java.lang.Double

Expression: ${225 % 17}
ExpectedType: class java.lang.Object
Evaluates to: 4
With type: java.lang.Long


Expression: ${ 1 + 2 + 3 * 5 + 6}
ExpectedType: class java.lang.Object
Evaluates to: 24
With type: java.lang.Long

Expression: ${ 1 + (2 + 3) * 5 + 6}
ExpectedType: class java.lang.Object
Evaluates to: 32
With type: java.lang.Long


#######################################################
# test logical operators

Expression: ${ true}
ExpectedType: class java.lang.Object
Evaluates to: true
With type: java.lang.Boolean

Expression: ${ not true}
ExpectedType: class java.lang.Object
Evaluates to: false
With type: java.lang.Boolean

Expression: ${ not false}
ExpectedType: class java.lang.Object
Evaluates to: true
With type: java.lang.Boolean

Expression: ${ not not true}
ExpectedType: class java.lang.Object
Evaluates to: true
With type: java.lang.Boolean

Expression: ${ not not false}
ExpectedType: class java.lang.Object
Evaluates to: false
With type: java.lang.Boolean

Expression: ${ true and false}
ExpectedType: class java.lang.Object
Evaluates to: false
With type: java.lang.Boolean

Expression: ${ true and true}
ExpectedType: class java.lang.Object
Evaluates to: true
With type: java.lang.Boolean

Expression: ${ false and true}
ExpectedType: class java.lang.Object
Evaluates to: false
With type: java.lang.Boolean

Expression: ${ false and false}
ExpectedType: class java.lang.Object
Evaluates to: false
With type: java.lang.Boolean

Expression: ${ true or false}
ExpectedType: class java.lang.Object
Evaluates to: true
With type: java.lang.Boolean

Expression: ${ true or true}
ExpectedType: class java.lang.Object
Evaluates to: true
With type: java.lang.Boolean

Expression: ${ false or true}
ExpectedType: class java.lang.Object
Evaluates to: true
With type: java.lang.Boolean

Expression: ${ false or false}
ExpectedType: class java.lang.Object
Evaluates to: false
With type: java.lang.Boolean


Expression: ${ false or false or false or true and false}
ExpectedType: class java.lang.Object
Evaluates to: false
With type: java.lang.Boolean

Expression: ${ false or false or false or true and false or true}
ExpectedType: class java.lang.Object
Evaluates to: true
With type: java.lang.Boolean


#######################################################
# test indexed access operator

# Test as equivalent to property accessor
Expression: ${ bean1a["double1"] }
ExpectedType: class java.lang.Object
Evaluates to: 89.224
With type: java.lang.Double

Expression: ${ bean1a["double1"].class }
ExpectedType: class java.lang.Object
Evaluates to: class java.lang.Double
With type: java.lang.Class


# Test as array accessor
Expression: ${ bean1a.stringArray1[-1]}
ExpectedType: class java.lang.Object
Evaluates to: null

Expression: ${ bean1a.stringArray1[0]}
ExpectedType: class java.lang.Object
Evaluates to: string1
With type: java.lang.String

Expression: ${ bean1a.stringArray1[1]}
ExpectedType: class java.lang.Object
Evaluates to: string2
With type: java.lang.String

Expression: ${ bean1a.stringArray1[2]}
ExpectedType: class java.lang.Object
Evaluates to: string3
With type: java.lang.String

Expression: ${ bean1a.stringArray1[3]}
ExpectedType: class java.lang.Object
Evaluates to: string4
With type: java.lang.String

Expression: ${ bean1a.stringArray1[4]}
ExpectedType: class java.lang.Object
Evaluates to: null


# Test as list accessor
Expression: ${ bean1a.list1 [0] }
ExpectedType: class java.lang.Object
Evaluates to: 14
With type: java.lang.Integer

Expression: ${ bean1a.list1 [1] }
ExpectedType: class java.lang.Object
Evaluates to: another value
With type: java.lang.String

Expression: ${ bean1a.list1 [2][2] }
ExpectedType: class java.lang.Object
Evaluates to: string3
With type: java.lang.String


# Test as indexed property accessor
Expression: ${ bean1a.indexed1[-1]}
ExpectedType: class java.lang.Object
Causes an error: Unable to find a value for "indexed1" in object of class "org.apache.taglibs.standard.lang.jstl.test.Bean1" using operator "."
Expression: ${ bean1a.indexed1[0]}
ExpectedType: class java.lang.Object
Causes an error: Unable to find a value for "indexed1" in object of class "org.apache.taglibs.standard.lang.jstl.test.Bean1" using operator "."
Expression: ${ bean1a.indexed1[1]}
ExpectedType: class java.lang.Object
Causes an error: Unable to find a value for "indexed1" in object of class "org.apache.taglibs.standard.lang.jstl.test.Bean1" using operator "."
Expression: ${ bean1a.indexed1[2]}
ExpectedType: class java.lang.Object
Causes an error: Unable to find a value for "indexed1" in object of class "org.apache.taglibs.standard.lang.jstl.test.Bean1" using operator "."
Expression: ${ bean1a.indexed1[3]}
ExpectedType: class java.lang.Object
Causes an error: Unable to find a value for "indexed1" in object of class "org.apache.taglibs.standard.lang.jstl.test.Bean1" using operator "."
Expression: ${ bean1a.indexed1[4]}
ExpectedType: class java.lang.Object
Causes an error: Unable to find a value for "indexed1" in object of class "org.apache.taglibs.standard.lang.jstl.test.Bean1" using operator "."

# Test as map accessor
Expression: ${ bean1a.map1.key1 }
ExpectedType: class java.lang.Object
Evaluates to: value1
With type: java.lang.String

Expression: ${ bean1a.map1 ["key1"] }
ExpectedType: class java.lang.Object
Evaluates to: value1
With type: java.lang.String

Expression: ${ bean1a.map1 [14] }
ExpectedType: class java.lang.Object
Evaluates to: value2
With type: java.lang.String

Expression: ${ bean1a.map1 [2 * 7] }
ExpectedType: class java.lang.Object
Evaluates to: value3
With type: java.lang.String

Expression: ${ bean1a.map1.recurse.list1[0] }
ExpectedType: class java.lang.Object
Evaluates to: 14
With type: java.lang.Integer


#######################################################
# test String concatenation

Expression: ${ "a" + "bcd" }
ExpectedType: class java.lang.Object
Causes an error: Attempt to apply operator "+" to arguments of type "java.lang.String" and "java.lang.String"
Expression: ${ "a" + (4*3) }
ExpectedType: class java.lang.Object
Causes an error: An exception occured trying to convert String "a" to type "java.lang.Long"
Expression: ${ bean1a.map1 ["key" + (5-4)] }
ExpectedType: class java.lang.Object
Causes an error: An exception occured trying to convert String "key" to type "java.lang.Long"

#######################################################
# test String comparisons

Expression: ${ "30" < "4" }
ExpectedType: class java.lang.Object
Evaluates to: true
With type: java.lang.Boolean

Expression: ${ 30 < "4" }
ExpectedType: class java.lang.Object
Evaluates to: false
With type: java.lang.Boolean

Expression: ${ 30 > "4" }
ExpectedType: class java.lang.Object
Evaluates to: true
With type: java.lang.Boolean

Expression: ${ "0004" == "4" }
ExpectedType: class java.lang.Object
Evaluates to: false
With type: java.lang.Boolean


#######################################################
# test relational comparison with alternate symbols

Expression: ${ 4 eq 3}
ExpectedType: class java.lang.Object
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered "eq" at line 1, column 6.
Was expecting one of:
    "}" ...
    "." ...
    ">" ...
    "gt" ...
    "<" ...
    "lt" ...
    "==" ...
    "<=" ...
    "le" ...
    ">=" ...
    "ge" ...
    "!=" ...
    "[" ...
    "+" ...
    "-" ...
    "*" ...
    "/" ...
    "div" ...
    "%" ...
    "mod" ...
    "and" ...
    "or" ...
    
Expression: ${ 4 neq 3}
ExpectedType: class java.lang.Object
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered "neq" at line 1, column 6.
Was expecting one of:
    "}" ...
    "." ...
    ">" ...
    "gt" ...
    "<" ...
    "lt" ...
    "==" ...
    "<=" ...
    "le" ...
    ">=" ...
    "ge" ...
    "!=" ...
    "[" ...
    "+" ...
    "-" ...
    "*" ...
    "/" ...
    "div" ...
    "%" ...
    "mod" ...
    "and" ...
    "or" ...
    
Expression: ${ 4 eq 4}
ExpectedType: class java.lang.Object
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered "eq" at line 1, column 6.
Was expecting one of:
    "}" ...
    "." ...
    ">" ...
    "gt" ...
    "<" ...
    "lt" ...
    "==" ...
    "<=" ...
    "le" ...
    ">=" ...
    "ge" ...
    "!=" ...
    "[" ...
    "+" ...
    "-" ...
    "*" ...
    "/" ...
    "div" ...
    "%" ...
    "mod" ...
    "and" ...
    "or" ...
    
Expression: ${ 4 neq 4}
ExpectedType: class java.lang.Object
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered "neq" at line 1, column 6.
Was expecting one of:
    "}" ...
    "." ...
    ">" ...
    "gt" ...
    "<" ...
    "lt" ...
    "==" ...
    "<=" ...
    "le" ...
    ">=" ...
    "ge" ...
    "!=" ...
    "[" ...
    "+" ...
    "-" ...
    "*" ...
    "/" ...
    "div" ...
    "%" ...
    "mod" ...
    "and" ...
    "or" ...
    
Expression: ${ 4 lt 3}
ExpectedType: class java.lang.Object
Evaluates to: false
With type: java.lang.Boolean

Expression: ${ 4 gt 3}
ExpectedType: class java.lang.Object
Evaluates to: true
With type: java.lang.Boolean

Expression: ${ 4 lte 3}
ExpectedType: class java.lang.Object
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered "lte" at line 1, column 6.
Was expecting one of:
    "}" ...
    "." ...
    ">" ...
    "gt" ...
    "<" ...
    "lt" ...
    "==" ...
    "<=" ...
    "le" ...
    ">=" ...
    "ge" ...
    "!=" ...
    "[" ...
    "+" ...
    "-" ...
    "*" ...
    "/" ...
    "div" ...
    "%" ...
    "mod" ...
    "and" ...
    "or" ...
    
Expression: ${ 4 gte 3}
ExpectedType: class java.lang.Object
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered "gte" at line 1, column 6.
Was expecting one of:
    "}" ...
    "." ...
    ">" ...
    "gt" ...
    "<" ...
    "lt" ...
    "==" ...
    "<=" ...
    "le" ...
    ">=" ...
    "ge" ...
    "!=" ...
    "[" ...
    "+" ...
    "-" ...
    "*" ...
    "/" ...
    "div" ...
    "%" ...
    "mod" ...
    "and" ...
    "or" ...
    
Expression: ${ 4 lte 4}
ExpectedType: class java.lang.Object
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered "lte" at line 1, column 6.
Was expecting one of:
    "}" ...
    "." ...
    ">" ...
    "gt" ...
    "<" ...
    "lt" ...
    "==" ...
    "<=" ...
    "le" ...
    ">=" ...
    "ge" ...
    "!=" ...
    "[" ...
    "+" ...
    "-" ...
    "*" ...
    "/" ...
    "div" ...
    "%" ...
    "mod" ...
    "and" ...
    "or" ...
    
Expression: ${ 4 gte 4}
ExpectedType: class java.lang.Object
Causes an error: Unable to parse the expression: org.apache.taglibs.standard.lang.jstl.CustomParseException: Encountered "gte" at line 1, column 6.
Was expecting one of:
    "}" ...
    "." ...
    ">" ...
    "gt" ...
    "<" ...
    "lt" ...
    "==" ...
    "<=" ...
    "le" ...
    ">=" ...
    "ge" ...
    "!=" ...
    "[" ...
    "+" ...
    "-" ...
    "*" ...
    "/" ...
    "div" ...
    "%" ...
    "mod" ...
    "and" ...
    "or" ...
    

#######################################################
# test expressions on the left side of a value suffix

Expression: ${(3).class}
ExpectedType: class java.lang.Object
Evaluates to: class java.lang.Integer
With type: java.lang.Class

Expression: ${(bean1a.map1)["key1"]}
ExpectedType: class java.lang.Object
Evaluates to: value1
With type: java.lang.String



#######################################################
# test String/boolean logical operators

Expression: ${'true' and false}
ExpectedType: class java.lang.Object
Evaluates to: false
With type: java.lang.Boolean

Expression: ${'true' or true}
ExpectedType: class java.lang.Object
Evaluates to: true
With type: java.lang.Boolean

Expression: ${false and 'true'}
ExpectedType: class java.lang.Object
Evaluates to: false
With type: java.lang.Boolean

Expression: ${false or 'true'}
ExpectedType: class java.lang.Object
Evaluates to: true
With type: java.lang.Boolean

